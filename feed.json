{
    "version": "https://jsonfeed.org/version/1",
    "title": "积识塘",
    "home_page_url": "https://valaxy.site/",
    "feed_url": "https://valaxy.site/feed.json",
    "description": "不积跬步，无以至千里",
    "icon": "https://valaxy.site/logo.png",
    "author": {
        "name": "XieZongChen"
    },
    "items": [
        {
            "id": "",
            "content_html": "<h2>前言</h2>\n<p>之前我们已经学习了开发环境的搭建（不熟悉的同学请先去熟悉开发环境的搭建）。开发环境是将源代码经过 webpack 编译成浏览器能识别的语法，并输出成 bundle，同时为了让程序员更加</p>\n",
            "url": "https://valaxy.site/posts/webpack-pro/index",
            "title": "webpack实战——配置生产环境",
            "date_modified": "2021-05-01T00:00:00.000Z",
            "date_published": "2024-03-01T01:52:29.376Z",
            "author": {
                "name": "XieZongChen"
            }
        },
        {
            "id": "",
            "content_html": "<h2>前言</h2>\n<p>webpack 是一种前端资源构建工具——它是一种工具。我们日常生活中遇到新型工具时，都是上手实际操作一下才能掌握工具的使用。在学会使用工具前，我们是不会刻意去先理解工具的原理。web</p>\n",
            "url": "https://valaxy.site/posts/webpack-dev/index",
            "title": "webpack实战——配置开发环境",
            "date_modified": "2021-03-20T00:00:00.000Z",
            "date_published": "2024-03-01T01:52:29.360Z",
            "author": {
                "name": "XieZongChen"
            }
        },
        {
            "id": "",
            "content_html": "<h2>前言</h2>\n<p>我们已经学习完了开发环境和成产环境的配置，接下来学习 webpack 的性能优化。从环境角度讲，性能优化分为开发环境性能优化和生产环境性能优化。对于开发环境，我们需要优化打包构建速度、</p>\n",
            "url": "https://valaxy.site/posts/webpack-optimization/index",
            "title": "webpack实战——性能优化",
            "date_modified": "2021-05-10T00:00:00.000Z",
            "date_published": "2024-03-01T01:52:29.360Z",
            "author": {
                "name": "XieZongChen"
            }
        },
        {
            "id": "",
            "content_html": "<h3>案例一</h3>\n<p>画出生命周期</p>\n<pre><code class=\"language-rust\">// `i` 拥有最长的生命周期，因为它的作用域完整的包含了 `borrow1` 和 `borrow2` 。\n// 而 `borrow1` 和 `b</code></pre>\n",
            "url": "https://valaxy.site/posts/learn-rust-lifetimes-condition-research",
            "title": "Rust 生命周期一些案例及分析",
            "date_modified": "2023-07-25T00:00:00.000Z",
            "date_published": "2024-03-01T01:52:29.332Z",
            "author": {
                "name": "XieZongChen"
            }
        },
        {
            "id": "",
            "content_html": "<h2>Preface（前言）</h2>\n<p>You can encapsulate a component to manage all NaiveUI providers in the project, whi</p>\n",
            "url": "https://valaxy.site/posts/naive-ui-provider-management",
            "title": "Naive-UI provider management（Naive-UI 统一管理 provider 封装）",
            "date_modified": "2021-07-11T00:00:00.000Z",
            "date_published": "2024-03-01T01:52:29.332Z",
            "author": {
                "name": "XieZongChen"
            }
        },
        {
            "id": "",
            "content_html": "<pre><code class=\"language-javascript\">class EventEmitter {\n  constructor() {\n    this.cache = new Map();\n  }\n\n  // 订阅\n  on </code></pre>\n",
            "url": "https://valaxy.site/posts/publish&subscribe",
            "title": "发布-订阅模式",
            "date_modified": "2022-08-25T00:00:00.000Z",
            "date_published": "2024-03-01T01:52:29.332Z",
            "author": {
                "name": "XieZongChen"
            }
        },
        {
            "id": "",
            "content_html": "<h2>前言</h2>\n<p>最近学习 rust 文档的 [subtyping-and-variance](<a href=\"https://doc.rust-lang.org/reference/subtyping.html#su\">https://doc.rust-lang.org/reference/subtyping.html#su</a></p>\n",
            "url": "https://valaxy.site/posts/rust-subtyping&variance",
            "title": "Rust 的子类型化和变异性",
            "date_modified": "2023-08-10T00:00:00.000Z",
            "date_published": "2024-03-01T01:52:29.332Z",
            "author": {
                "name": "XieZongChen"
            }
        },
        {
            "id": "",
            "content_html": "<h2>异步调用队列</h2>\n<pre><code class=\"language-javascript\">class Queue {\n  constructor(name) {\n    this.name = name;\n    this.result </code></pre>\n",
            "url": "https://valaxy.site/posts/scriptRecord",
            "title": "编程题积累",
            "date_modified": "2022-09-14T00:00:00.000Z",
            "date_published": "2024-03-01T01:52:29.332Z",
            "author": {
                "name": "XieZongChen"
            }
        },
        {
            "id": "",
            "content_html": "<h2>前言</h2>\n<p>“开源”通常指开源模型，是一种去中心化的软件开发模型，它鼓励开放式协作，即“任何创新或生产系统都依赖于以目标为导向但松散协调的参与者进行交互来创建具有经济价值的产品（或服务），它们可以</p>\n",
            "url": "https://valaxy.site/posts/github/index",
            "title": "如何给开源项目贡献代码",
            "date_modified": "2021-08-23T00:00:00.000Z",
            "date_published": "2024-03-01T01:52:29.332Z",
            "author": {
                "name": "XieZongChen"
            }
        },
        {
            "id": "",
            "content_html": "<h2>webpack 是什么</h2>\n<p>webpack 是一种前端资源构建工具，一个静态模块打包器（module bundler）。在 webpack 看来，前端的所有资源文件（js 、json 、css</p>\n",
            "url": "https://valaxy.site/posts/webpack-base/index",
            "title": "webpack基础学习",
            "date_modified": "2021-03-12T00:00:00.000Z",
            "date_published": "2024-03-01T01:52:29.332Z",
            "author": {
                "name": "XieZongChen"
            }
        },
        {
            "id": "",
            "content_html": "<blockquote>\n<p>面向对象编程(OOP)通过封装变化使得代码更易理解。 函数式编程(FP)通过最小化变化使得代码更易理解。</p>\n<p>-- Michacel Feathers（Twitter）</p>\n</blockquote>\n<h2>什么是函数式</h2>\n",
            "url": "https://valaxy.site/posts/functional",
            "title": "函数式编程",
            "date_modified": "2020-05-01T00:00:00.000Z",
            "date_published": "2024-03-01T01:52:29.324Z",
            "author": {
                "name": "XieZongChen"
            }
        },
        {
            "id": "",
            "content_html": "<h3>重建二叉树</h3>\n<p>输入某二叉树的前序遍历和中序遍历的结果，请构建该二叉树并返回其根节点。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。[Leetcode 剑指 offer 07](htt</p>\n",
            "url": "https://valaxy.site/posts/getOffer",
            "title": "剑指 offer 刷题总结",
            "date_modified": "2022-02-28T00:00:00.000Z",
            "date_published": "2024-03-01T01:52:29.324Z",
            "author": {
                "name": "XieZongChen"
            }
        },
        {
            "id": "",
            "content_html": "<h2>前言</h2>\n<p>继承是面向对象编程思想中很重要的一个概念，它与多态、封装共为面向对象的三个基本特征。继承不但帮助我们拓展了代码的可解释性，还能提升代码的可复用性。A 对象通过继承 B 对象，就能直接拥</p>\n",
            "url": "https://valaxy.site/posts/extend/index",
            "title": "JavaScript中的继承",
            "date_modified": "2020-08-22T00:00:00.000Z",
            "date_published": "2024-03-01T01:52:29.324Z",
            "author": {
                "name": "XieZongChen"
            }
        },
        {
            "id": "",
            "content_html": "<h2>Git 的诞生</h2>\n<p>很多人都知道，Linus 在 1991 年创建了开源的 Linux，从此，Linux 系统不断发展，已经成为最大的服务器系统软件了。Linus 虽然创建了 Linux，但 L</p>\n",
            "url": "https://valaxy.site/posts/git/index",
            "title": "Git学习笔记",
            "date_modified": "2020-03-14T00:00:00.000Z",
            "date_published": "2024-03-01T01:52:29.324Z",
            "author": {
                "name": "XieZongChen"
            }
        },
        {
            "id": "",
            "content_html": "<pre><code class=\"language-javascript\">class LRUCache {\n  constructor(capacity) {\n    this.map = new Map();\n    this.capacit</code></pre>\n",
            "url": "https://valaxy.site/posts/LRUCache",
            "title": "LRU 缓存",
            "date_modified": "2022-09-12T00:00:00.000Z",
            "date_published": "2024-03-01T01:52:29.320Z",
            "author": {
                "name": "XieZongChen"
            }
        },
        {
            "id": "",
            "content_html": "<h2>链表相关</h2>\n<h3>反转链表</h3>\n<p>给你单链表的头节点 <code>head</code>，请你反转链表，并返回反转后的链表。[Leetcode 206](<a href=\"https://leetcode-cn.com/problem\">https://leetcode-cn.com/problem</a></p>\n",
            "url": "https://valaxy.site/posts/LeetcodeSummary",
            "title": "Leetcode 刷题总结",
            "date_modified": "2022-02-28T00:00:00.000Z",
            "date_published": "2024-03-01T01:52:29.320Z",
            "author": {
                "name": "XieZongChen"
            }
        },
        {
            "id": "",
            "content_html": "<p><strong>注：本文只是简单实现，表达核心原理，边界情况不予考虑</strong></p>\n<h2>call</h2>\n<pre><code class=\"language-javascript\">Function.prototype.myCall = function (thisBi</code></pre>\n",
            "url": "https://valaxy.site/posts/call&apply&bind",
            "title": "ES6 实现 call & apply & bind",
            "date_modified": "2022-02-14T00:00:00.000Z",
            "date_published": "2024-03-01T01:52:29.320Z",
            "author": {
                "name": "XieZongChen"
            }
        },
        {
            "id": "",
            "content_html": "<h2>前言</h2>\n<p>为了提高编程效率，程序员们总是会将写过的代码进行抽象去业务化并进行抽离，这种“高内聚，低耦合”增加代码复用性的做法久而久之便形成了组件化的思想。组件化能提高开发效率，方便代码的重复使用</p>\n",
            "url": "https://valaxy.site/posts/componentization",
            "title": "Vue组件化技巧总结",
            "date_modified": "2020-08-08T00:00:00.000Z",
            "date_published": "2024-03-01T01:52:29.320Z",
            "author": {
                "name": "XieZongChen"
            }
        },
        {
            "id": "",
            "content_html": "<h2>防抖（debounce）</h2>\n<p>防抖的原理是：当事件触发时，所触发的回调函数在 n 秒后执行，在这 n 秒内如果事件再次触发，则以新的事件的时间为准，n 秒后再执行新的回调函数。</p>\n<h3>简单版</h3>\n",
            "url": "https://valaxy.site/posts/debounce&throttle",
            "title": "防抖 & 节流",
            "date_modified": "2022-03-14T00:00:00.000Z",
            "date_published": "2024-03-01T01:52:29.320Z",
            "author": {
                "name": "XieZongChen"
            }
        },
        {
            "id": "",
            "content_html": "<h2>前言</h2>\n<p>如今的电脑系统越来越强大，功能越来越多。为了方便用户的使用，开发者们会按使用频率、重要性等指标对系统的功能进行归类、折叠。这就造成我们想使用一个一般用户不经常使用的功能时，需要寻找到很</p>\n",
            "url": "https://valaxy.site/posts/executableScript",
            "title": "MacOS、Linux 系统制作自定义脚本",
            "date_modified": "2021-04-29T00:00:00.000Z",
            "date_published": "2024-03-01T01:52:29.320Z",
            "author": {
                "name": "XieZongChen"
            }
        }
    ]
}