import{_ as E}from"./ValaxyMain.vue_vue_type_style_index_0_lang-CJwb-j0h.js";import{_ as y,u as i,c as d,w as o,p as F,o as u,a as s,b as l,d as t,r as a,e as g}from"./app-t0WzKcrM.js";import"./YunFooter.vue_vue_type_script_setup_true_lang-CJldLY-7.js";import"./YunCard.vue_vue_type_script_setup_true_lang-CgAMBqk4.js";import"./YunPageHeader.vue_vue_type_script_setup_true_lang-CQr6kV1W.js";import"./index-C7yU5XnD.js";const as=JSON.parse('{"title":"函数式编程","description":"","frontmatter":{"title":"函数式编程","date":"2020-05-01T00:00:00.000Z","categories":["编程"],"tags":["范式"]},"headers":[{"level":2,"title":"什么是函数式编程","slug":"什么是函数式编程","link":"#什么是函数式编程","children":[]},{"level":2,"title":"合成（Compose）","slug":"合成-compose","link":"#合成-compose","children":[]},{"level":2,"title":"柯里化（Currying）","slug":"柯里化-currying","link":"#柯里化-currying","children":[{"level":3,"title":"实现一个柯里化函数","slug":"实现一个柯里化函数","link":"#实现一个柯里化函数","children":[]}]}],"relativePath":"pages/posts/functional.md","path":"/home/runner/work/xzc-blog/xzc-blog/pages/posts/functional.md","lastUpdated":1709257929000}'),e=JSON.parse('{"title":"函数式编程","description":"","frontmatter":{"title":"函数式编程","date":"2020-05-01T00:00:00.000Z","categories":["编程"],"tags":["范式"]},"headers":[{"level":2,"title":"什么是函数式编程","slug":"什么是函数式编程","link":"#什么是函数式编程","children":[]},{"level":2,"title":"合成（Compose）","slug":"合成-compose","link":"#合成-compose","children":[]},{"level":2,"title":"柯里化（Currying）","slug":"柯里化-currying","link":"#柯里化-currying","children":[{"level":3,"title":"实现一个柯里化函数","slug":"实现一个柯里化函数","link":"#实现一个柯里化函数","children":[]}]}],"relativePath":"pages/posts/functional.md","path":"/home/runner/work/xzc-blog/xzc-blog/pages/posts/functional.md","lastUpdated":1709257929000}'),h={name:"pages/posts/functional.md",data(){return{data:e,frontmatter:e.frontmatter,$frontmatter:e.frontmatter}},setup(){const n=i();n.meta.frontmatter=Object.assign(n.meta.frontmatter,e.frontmatter),F("pageData",e)}},f=s("blockquote",null,[s("p",null,"面向对象编程(OOP)通过封装变化使得代码更易理解。 函数式编程(FP)通过最小化变化使得代码更易理解。"),s("p",null,"-- Michacel Feathers（Twitter）")],-1),C={id:"什么是函数式编程",tabindex:"-1"},A=s("p",null,"简单的说，函数式编程倡导利用若干简单的执行单元让计算结果不断渐进，逐层推导复杂的运算。函数式编程有两个最基本的运算：合成（Compose）和柯里化（Currying）。",-1),B={id:"合成-compose",tabindex:"-1"},D=s("p",null,[l("如果一个值要经过多个函数，才能变成另外一个值，就可以把所有中间步骤合并成一个函数，这叫做"),s("strong",null,"函数的合成"),l("（compose）。合成的好处显而易见，它让代码变得简单而富有可读性，同时通过不同的组合方式，我们可以轻易组合出其他常用函数，让我们的代码更具表现力。")],-1),m=s("p",null,"我们在工作中经常会遇到需要按顺序执行一些函数的情况，如下所示：",-1),_=s("div",{class:"language-javascript"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"javascript"),s("pre",{class:"shiki github-dark vp-code-dark"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#F97583"}},"function"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#B392F0"}},"f1"),s("span",{style:{color:"#E1E4E8"}},"("),s("span",{style:{color:"#FFAB70"}},"arg"),s("span",{style:{color:"#E1E4E8"}},") {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"  console."),s("span",{style:{color:"#B392F0"}},"log"),s("span",{style:{color:"#E1E4E8"}},"("),s("span",{style:{color:"#9ECBFF"}},'"f1"'),s("span",{style:{color:"#E1E4E8"}},", arg);")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"  "),s("span",{style:{color:"#F97583"}},"return"),s("span",{style:{color:"#E1E4E8"}}," arg;")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"}")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F97583"}},"function"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#B392F0"}},"f2"),s("span",{style:{color:"#E1E4E8"}},"("),s("span",{style:{color:"#FFAB70"}},"arg"),s("span",{style:{color:"#E1E4E8"}},") {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"  console."),s("span",{style:{color:"#B392F0"}},"log"),s("span",{style:{color:"#E1E4E8"}},"("),s("span",{style:{color:"#9ECBFF"}},'"f2"'),s("span",{style:{color:"#E1E4E8"}},", arg);")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"  "),s("span",{style:{color:"#F97583"}},"return"),s("span",{style:{color:"#E1E4E8"}}," arg;")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"}")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F97583"}},"function"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#B392F0"}},"f3"),s("span",{style:{color:"#E1E4E8"}},"("),s("span",{style:{color:"#FFAB70"}},"arg"),s("span",{style:{color:"#E1E4E8"}},") {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"  console."),s("span",{style:{color:"#B392F0"}},"log"),s("span",{style:{color:"#E1E4E8"}},"("),s("span",{style:{color:"#9ECBFF"}},'"f3"'),s("span",{style:{color:"#E1E4E8"}},", arg);")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"  "),s("span",{style:{color:"#F97583"}},"return"),s("span",{style:{color:"#E1E4E8"}}," arg;")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"}")])])]),s("pre",{class:"shiki github-light vp-code-light"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#D73A49"}},"function"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#6F42C1"}},"f1"),s("span",{style:{color:"#24292E"}},"("),s("span",{style:{color:"#E36209"}},"arg"),s("span",{style:{color:"#24292E"}},") {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"  console."),s("span",{style:{color:"#6F42C1"}},"log"),s("span",{style:{color:"#24292E"}},"("),s("span",{style:{color:"#032F62"}},'"f1"'),s("span",{style:{color:"#24292E"}},", arg);")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"  "),s("span",{style:{color:"#D73A49"}},"return"),s("span",{style:{color:"#24292E"}}," arg;")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"}")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D73A49"}},"function"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#6F42C1"}},"f2"),s("span",{style:{color:"#24292E"}},"("),s("span",{style:{color:"#E36209"}},"arg"),s("span",{style:{color:"#24292E"}},") {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"  console."),s("span",{style:{color:"#6F42C1"}},"log"),s("span",{style:{color:"#24292E"}},"("),s("span",{style:{color:"#032F62"}},'"f2"'),s("span",{style:{color:"#24292E"}},", arg);")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"  "),s("span",{style:{color:"#D73A49"}},"return"),s("span",{style:{color:"#24292E"}}," arg;")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"}")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D73A49"}},"function"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#6F42C1"}},"f3"),s("span",{style:{color:"#24292E"}},"("),s("span",{style:{color:"#E36209"}},"arg"),s("span",{style:{color:"#24292E"}},") {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"  console."),s("span",{style:{color:"#6F42C1"}},"log"),s("span",{style:{color:"#24292E"}},"("),s("span",{style:{color:"#032F62"}},'"f3"'),s("span",{style:{color:"#24292E"}},", arg);")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"  "),s("span",{style:{color:"#D73A49"}},"return"),s("span",{style:{color:"#24292E"}}," arg;")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"}")])])]),s("button",{class:"collapse"})],-1),v=s("p",null,[l("当我要使用参数 "),s("code",null,"'run'"),l(" 依次从 "),s("code",null,"f3"),l(" 到 "),s("code",null,"f1"),l(" 执行上图的三个函数时，一般情况会写成这样两种情况：")],-1),b=s("div",{class:"language-javascript"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"javascript"),s("pre",{class:"shiki github-dark vp-code-dark"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#B392F0"}},"f1"),s("span",{style:{color:"#E1E4E8"}},"("),s("span",{style:{color:"#B392F0"}},"f2"),s("span",{style:{color:"#E1E4E8"}},"("),s("span",{style:{color:"#B392F0"}},"f3"),s("span",{style:{color:"#E1E4E8"}},"("),s("span",{style:{color:"#9ECBFF"}},'"run"'),s("span",{style:{color:"#E1E4E8"}},")));")])])]),s("pre",{class:"shiki github-light vp-code-light"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#6F42C1"}},"f1"),s("span",{style:{color:"#24292E"}},"("),s("span",{style:{color:"#6F42C1"}},"f2"),s("span",{style:{color:"#24292E"}},"("),s("span",{style:{color:"#6F42C1"}},"f3"),s("span",{style:{color:"#24292E"}},"("),s("span",{style:{color:"#032F62"}},'"run"'),s("span",{style:{color:"#24292E"}},")));")])])]),s("button",{class:"collapse"})],-1),k=s("p",null,"大家会发现这样虽然会按要求的顺序依次执行函数，但是同时会让代码可读性变差、不够灵活而且不够优雅。那我们不妨将“依次执行”这个处理步骤抽象出来变成一个函数，以后我只需要调用抽象出来的函数，传入我要执行的那三个函数以及参数，便可做到“依次执行”这个过程。我们来尝试一下：",-1),j=s("div",{class:"language-javascript"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"javascript"),s("pre",{class:"shiki github-dark vp-code-dark"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#F97583"}},"function"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#B392F0"}},"compose"),s("span",{style:{color:"#E1E4E8"}},"("),s("span",{style:{color:"#F97583"}},"..."),s("span",{style:{color:"#FFAB70"}},"funcs"),s("span",{style:{color:"#E1E4E8"}},") {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"  "),s("span",{style:{color:"#6A737D"}},"// funcs是我们传入的函数数组")]),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"  "),s("span",{style:{color:"#F97583"}},"if"),s("span",{style:{color:"#E1E4E8"}}," (funcs."),s("span",{style:{color:"#79B8FF"}},"length"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#F97583"}},"==="),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#79B8FF"}},"0"),s("span",{style:{color:"#E1E4E8"}},") {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"    "),s("span",{style:{color:"#6A737D"}},"// 当函数数组内没有函数时，为了保持纯函数的特点，返回一个空函数")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"    "),s("span",{style:{color:"#F97583"}},"return"),s("span",{style:{color:"#E1E4E8"}}," ("),s("span",{style:{color:"#FFAB70"}},"arg"),s("span",{style:{color:"#E1E4E8"}},") "),s("span",{style:{color:"#F97583"}},"=>"),s("span",{style:{color:"#E1E4E8"}}," arg; "),s("span",{style:{color:"#6A737D"}},"// 为了好看，把回调参数写上去了")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"  }")]),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"  "),s("span",{style:{color:"#F97583"}},"if"),s("span",{style:{color:"#E1E4E8"}}," (funcs."),s("span",{style:{color:"#79B8FF"}},"length"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#F97583"}},"==="),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#79B8FF"}},"1"),s("span",{style:{color:"#E1E4E8"}},") {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"    "),s("span",{style:{color:"#6A737D"}},"// 当函数数组内只有一个函数时，执行函数")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"    "),s("span",{style:{color:"#F97583"}},"return"),s("span",{style:{color:"#E1E4E8"}}," funcs["),s("span",{style:{color:"#79B8FF"}},"0"),s("span",{style:{color:"#E1E4E8"}},"];")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"  }")]),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"  "),s("span",{style:{color:"#6A737D"}},"//其余情况下返回按执行顺序重组的函数数组，并将回调参数传入")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"  "),s("span",{style:{color:"#F97583"}},"return"),s("span",{style:{color:"#E1E4E8"}}," funcs."),s("span",{style:{color:"#B392F0"}},"reduce"),s("span",{style:{color:"#E1E4E8"}},"(")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"    ("),s("span",{style:{color:"#FFAB70"}},"a"),s("span",{style:{color:"#E1E4E8"}},", "),s("span",{style:{color:"#FFAB70"}},"b"),s("span",{style:{color:"#E1E4E8"}},") "),s("span",{style:{color:"#F97583"}},"=>")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"      ("),s("span",{style:{color:"#F97583"}},"..."),s("span",{style:{color:"#FFAB70"}},"args"),s("span",{style:{color:"#E1E4E8"}},") "),s("span",{style:{color:"#F97583"}},"=>")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"        "),s("span",{style:{color:"#B392F0"}},"a"),s("span",{style:{color:"#E1E4E8"}},"("),s("span",{style:{color:"#B392F0"}},"b"),s("span",{style:{color:"#E1E4E8"}},"("),s("span",{style:{color:"#F97583"}},"..."),s("span",{style:{color:"#E1E4E8"}},"args))")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"  );")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"}")])])]),s("pre",{class:"shiki github-light vp-code-light"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#D73A49"}},"function"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#6F42C1"}},"compose"),s("span",{style:{color:"#24292E"}},"("),s("span",{style:{color:"#D73A49"}},"..."),s("span",{style:{color:"#E36209"}},"funcs"),s("span",{style:{color:"#24292E"}},") {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"  "),s("span",{style:{color:"#6A737D"}},"// funcs是我们传入的函数数组")]),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"  "),s("span",{style:{color:"#D73A49"}},"if"),s("span",{style:{color:"#24292E"}}," (funcs."),s("span",{style:{color:"#005CC5"}},"length"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#D73A49"}},"==="),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#005CC5"}},"0"),s("span",{style:{color:"#24292E"}},") {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"    "),s("span",{style:{color:"#6A737D"}},"// 当函数数组内没有函数时，为了保持纯函数的特点，返回一个空函数")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"    "),s("span",{style:{color:"#D73A49"}},"return"),s("span",{style:{color:"#24292E"}}," ("),s("span",{style:{color:"#E36209"}},"arg"),s("span",{style:{color:"#24292E"}},") "),s("span",{style:{color:"#D73A49"}},"=>"),s("span",{style:{color:"#24292E"}}," arg; "),s("span",{style:{color:"#6A737D"}},"// 为了好看，把回调参数写上去了")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"  }")]),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"  "),s("span",{style:{color:"#D73A49"}},"if"),s("span",{style:{color:"#24292E"}}," (funcs."),s("span",{style:{color:"#005CC5"}},"length"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#D73A49"}},"==="),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#005CC5"}},"1"),s("span",{style:{color:"#24292E"}},") {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"    "),s("span",{style:{color:"#6A737D"}},"// 当函数数组内只有一个函数时，执行函数")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"    "),s("span",{style:{color:"#D73A49"}},"return"),s("span",{style:{color:"#24292E"}}," funcs["),s("span",{style:{color:"#005CC5"}},"0"),s("span",{style:{color:"#24292E"}},"];")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"  }")]),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"  "),s("span",{style:{color:"#6A737D"}},"//其余情况下返回按执行顺序重组的函数数组，并将回调参数传入")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"  "),s("span",{style:{color:"#D73A49"}},"return"),s("span",{style:{color:"#24292E"}}," funcs."),s("span",{style:{color:"#6F42C1"}},"reduce"),s("span",{style:{color:"#24292E"}},"(")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"    ("),s("span",{style:{color:"#E36209"}},"a"),s("span",{style:{color:"#24292E"}},", "),s("span",{style:{color:"#E36209"}},"b"),s("span",{style:{color:"#24292E"}},") "),s("span",{style:{color:"#D73A49"}},"=>")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"      ("),s("span",{style:{color:"#D73A49"}},"..."),s("span",{style:{color:"#E36209"}},"args"),s("span",{style:{color:"#24292E"}},") "),s("span",{style:{color:"#D73A49"}},"=>")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"        "),s("span",{style:{color:"#6F42C1"}},"a"),s("span",{style:{color:"#24292E"}},"("),s("span",{style:{color:"#6F42C1"}},"b"),s("span",{style:{color:"#24292E"}},"("),s("span",{style:{color:"#D73A49"}},"..."),s("span",{style:{color:"#24292E"}},"args))")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"  );")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"}")])])]),s("button",{class:"collapse"})],-1),x=s("p",null,[l("在实现这个 "),s("code",null,"compose"),l(" 函数时，由于我们要传入的 "),s("code",null,"f1"),l("、"),s("code",null,"f2"),l("、"),s("code",null,"f3"),l(" 是函数，而 "),s("code",null,"'run'"),l(" 是 "),s("code",null,"f1"),l("、"),s("code",null,"f2"),l("、"),s("code",null,"f3"),l(" 执行时的参数，虽然他们在这个 "),s("code",null,"compose"),l(" 函数中所扮演的角色都是参数，但他们的含义是不一样的，为了执行时的代码易懂，我们需要对他们进行隔离，而隔离的方式就是回调函数。所以我们要这样使用 "),s("code",null,"compose"),l("：")],-1),$=s("div",{class:"language-javascript"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"javascript"),s("pre",{class:"shiki github-dark vp-code-dark"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#B392F0"}},"compose"),s("span",{style:{color:"#E1E4E8"}},"(f1, f2, f3)("),s("span",{style:{color:"#9ECBFF"}},'"run"'),s("span",{style:{color:"#E1E4E8"}},");")])])]),s("pre",{class:"shiki github-light vp-code-light"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#6F42C1"}},"compose"),s("span",{style:{color:"#24292E"}},"(f1, f2, f3)("),s("span",{style:{color:"#032F62"}},'"run"'),s("span",{style:{color:"#24292E"}},");")])])]),s("button",{class:"collapse"})],-1),w=s("p",null,"这样我们就使用“函数的合成”将之前的代码进行了优化。对比优化前后的代码，逻辑性、可读性等大大提升。并且无论我们将来要这样执行多少个函数，只需要增加传入的函数参数即可，不用再去痛苦的“包洋葱”了。",-1),z={id:"柯里化-currying",tabindex:"-1"},P=s("p",null,[s("strong",null,"柯里化"),l("（Currying），又译为"),s("strong",null,"卡瑞化"),l("或"),s("strong",null,"加里化"),l("，是把接受多个参数的函数变换成接受一个单一参数（最初函数的第一个参数）的函数，并且返回接受余下的参数而且返回结果的新函数的技术。简单的说，就是把一个多参数的函数，转化为单参数函数。")],-1),T=s("p",null,"我们可以想象一个这样的场景：",-1),N=s("div",{class:"language-javascript"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"javascript"),s("pre",{class:"shiki github-dark vp-code-dark"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#F97583"}},"function"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#B392F0"}},"add"),s("span",{style:{color:"#E1E4E8"}},"("),s("span",{style:{color:"#FFAB70"}},"x"),s("span",{style:{color:"#E1E4E8"}},", "),s("span",{style:{color:"#FFAB70"}},"y"),s("span",{style:{color:"#E1E4E8"}},") {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"  "),s("span",{style:{color:"#F97583"}},"return"),s("span",{style:{color:"#E1E4E8"}}," x "),s("span",{style:{color:"#F97583"}},"+"),s("span",{style:{color:"#E1E4E8"}}," y;")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"}")]),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#B392F0"}},"add"),s("span",{style:{color:"#E1E4E8"}},"("),s("span",{style:{color:"#79B8FF"}},"1"),s("span",{style:{color:"#E1E4E8"}},", "),s("span",{style:{color:"#79B8FF"}},"2"),s("span",{style:{color:"#E1E4E8"}},"); "),s("span",{style:{color:"#6A737D"}},"// 3")])])]),s("pre",{class:"shiki github-light vp-code-light"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#D73A49"}},"function"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#6F42C1"}},"add"),s("span",{style:{color:"#24292E"}},"("),s("span",{style:{color:"#E36209"}},"x"),s("span",{style:{color:"#24292E"}},", "),s("span",{style:{color:"#E36209"}},"y"),s("span",{style:{color:"#24292E"}},") {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"  "),s("span",{style:{color:"#D73A49"}},"return"),s("span",{style:{color:"#24292E"}}," x "),s("span",{style:{color:"#D73A49"}},"+"),s("span",{style:{color:"#24292E"}}," y;")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"}")]),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#6F42C1"}},"add"),s("span",{style:{color:"#24292E"}},"("),s("span",{style:{color:"#005CC5"}},"1"),s("span",{style:{color:"#24292E"}},", "),s("span",{style:{color:"#005CC5"}},"2"),s("span",{style:{color:"#24292E"}},"); "),s("span",{style:{color:"#6A737D"}},"// 3")])])]),s("button",{class:"collapse"})],-1),O=s("p",null,"场景里我们实现了一个加法功能的函数，那么现在我们将其柯里化一下：",-1),V=s("div",{class:"language-javascript"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"javascript"),s("pre",{class:"shiki github-dark vp-code-dark"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#F97583"}},"function"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#B392F0"}},"add"),s("span",{style:{color:"#E1E4E8"}},"("),s("span",{style:{color:"#FFAB70"}},"y"),s("span",{style:{color:"#E1E4E8"}},") {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"  "),s("span",{style:{color:"#F97583"}},"return"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#F97583"}},"function"),s("span",{style:{color:"#E1E4E8"}}," ("),s("span",{style:{color:"#FFAB70"}},"x"),s("span",{style:{color:"#E1E4E8"}},") {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"    "),s("span",{style:{color:"#F97583"}},"return"),s("span",{style:{color:"#E1E4E8"}}," x "),s("span",{style:{color:"#F97583"}},"+"),s("span",{style:{color:"#E1E4E8"}}," y;")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"  };")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"}")]),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#B392F0"}},"add"),s("span",{style:{color:"#E1E4E8"}},"("),s("span",{style:{color:"#79B8FF"}},"2"),s("span",{style:{color:"#E1E4E8"}},")("),s("span",{style:{color:"#79B8FF"}},"1"),s("span",{style:{color:"#E1E4E8"}},"); "),s("span",{style:{color:"#6A737D"}},"//3")])])]),s("pre",{class:"shiki github-light vp-code-light"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#D73A49"}},"function"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#6F42C1"}},"add"),s("span",{style:{color:"#24292E"}},"("),s("span",{style:{color:"#E36209"}},"y"),s("span",{style:{color:"#24292E"}},") {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"  "),s("span",{style:{color:"#D73A49"}},"return"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#D73A49"}},"function"),s("span",{style:{color:"#24292E"}}," ("),s("span",{style:{color:"#E36209"}},"x"),s("span",{style:{color:"#24292E"}},") {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"    "),s("span",{style:{color:"#D73A49"}},"return"),s("span",{style:{color:"#24292E"}}," x "),s("span",{style:{color:"#D73A49"}},"+"),s("span",{style:{color:"#24292E"}}," y;")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"  };")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"}")]),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#6F42C1"}},"add"),s("span",{style:{color:"#24292E"}},"("),s("span",{style:{color:"#005CC5"}},"2"),s("span",{style:{color:"#24292E"}},")("),s("span",{style:{color:"#005CC5"}},"1"),s("span",{style:{color:"#24292E"}},"); "),s("span",{style:{color:"#6A737D"}},"//3")])])]),s("button",{class:"collapse"})],-1),S=s("p",null,"对比柯里化前后你可能会产生疑惑，不知道为什么要将函数写的这么“复杂”，那么我们看看柯里化后的函数有什么使用场景：",-1),q=s("div",{class:"language-javascript"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"javascript"),s("pre",{class:"shiki github-dark vp-code-dark"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#F97583"}},"function"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#B392F0"}},"add"),s("span",{style:{color:"#E1E4E8"}},"("),s("span",{style:{color:"#FFAB70"}},"x"),s("span",{style:{color:"#E1E4E8"}},") {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"  "),s("span",{style:{color:"#F97583"}},"return"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#F97583"}},"function"),s("span",{style:{color:"#E1E4E8"}}," ("),s("span",{style:{color:"#FFAB70"}},"y"),s("span",{style:{color:"#E1E4E8"}},") {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"    "),s("span",{style:{color:"#F97583"}},"return"),s("span",{style:{color:"#E1E4E8"}}," x "),s("span",{style:{color:"#F97583"}},"+"),s("span",{style:{color:"#E1E4E8"}}," y;")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"  };")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"}")]),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F97583"}},"var"),s("span",{style:{color:"#E1E4E8"}}," increment "),s("span",{style:{color:"#F97583"}},"="),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#B392F0"}},"add"),s("span",{style:{color:"#E1E4E8"}},"("),s("span",{style:{color:"#79B8FF"}},"1"),s("span",{style:{color:"#E1E4E8"}},");")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F97583"}},"var"),s("span",{style:{color:"#E1E4E8"}}," addTen "),s("span",{style:{color:"#F97583"}},"="),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#B392F0"}},"add"),s("span",{style:{color:"#E1E4E8"}},"("),s("span",{style:{color:"#79B8FF"}},"10"),s("span",{style:{color:"#E1E4E8"}},");")]),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#B392F0"}},"increment"),s("span",{style:{color:"#E1E4E8"}},"("),s("span",{style:{color:"#79B8FF"}},"2"),s("span",{style:{color:"#E1E4E8"}},"); "),s("span",{style:{color:"#6A737D"}},"// 3")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#B392F0"}},"addTen"),s("span",{style:{color:"#E1E4E8"}},"("),s("span",{style:{color:"#79B8FF"}},"2"),s("span",{style:{color:"#E1E4E8"}},"); "),s("span",{style:{color:"#6A737D"}},"// 12")])])]),s("pre",{class:"shiki github-light vp-code-light"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#D73A49"}},"function"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#6F42C1"}},"add"),s("span",{style:{color:"#24292E"}},"("),s("span",{style:{color:"#E36209"}},"x"),s("span",{style:{color:"#24292E"}},") {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"  "),s("span",{style:{color:"#D73A49"}},"return"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#D73A49"}},"function"),s("span",{style:{color:"#24292E"}}," ("),s("span",{style:{color:"#E36209"}},"y"),s("span",{style:{color:"#24292E"}},") {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"    "),s("span",{style:{color:"#D73A49"}},"return"),s("span",{style:{color:"#24292E"}}," x "),s("span",{style:{color:"#D73A49"}},"+"),s("span",{style:{color:"#24292E"}}," y;")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"  };")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"}")]),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D73A49"}},"var"),s("span",{style:{color:"#24292E"}}," increment "),s("span",{style:{color:"#D73A49"}},"="),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#6F42C1"}},"add"),s("span",{style:{color:"#24292E"}},"("),s("span",{style:{color:"#005CC5"}},"1"),s("span",{style:{color:"#24292E"}},");")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D73A49"}},"var"),s("span",{style:{color:"#24292E"}}," addTen "),s("span",{style:{color:"#D73A49"}},"="),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#6F42C1"}},"add"),s("span",{style:{color:"#24292E"}},"("),s("span",{style:{color:"#005CC5"}},"10"),s("span",{style:{color:"#24292E"}},");")]),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#6F42C1"}},"increment"),s("span",{style:{color:"#24292E"}},"("),s("span",{style:{color:"#005CC5"}},"2"),s("span",{style:{color:"#24292E"}},"); "),s("span",{style:{color:"#6A737D"}},"// 3")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#6F42C1"}},"addTen"),s("span",{style:{color:"#24292E"}},"("),s("span",{style:{color:"#005CC5"}},"2"),s("span",{style:{color:"#24292E"}},"); "),s("span",{style:{color:"#6A737D"}},"// 12")])])]),s("button",{class:"collapse"})],-1),J=s("p",null,[l("这个使用场景里，我们调用 "),s("code",null,"add"),l(" 之后，返回的函数就通过闭包的方式记住了 "),s("code",null,"add"),l(" 的第一个参数。而且我们还为返回的函数更改了名字，使其更“具象化”。通过这“记住参数”+“改名字”两个简单的步骤，让我们编程时将关注的重点聚焦到函数本身，而不因冗余的数据参数分散注意力。（这里仅是个人理解，如有错误还请指正）")],-1),M={id:"实现一个柯里化函数",tabindex:"-1"},U=s("p",null,"目的：实现下面的 curry 函数",-1),Z=s("div",{class:"language-javascript"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"javascript"),s("pre",{class:"shiki github-dark vp-code-dark"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#F97583"}},"function"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#B392F0"}},"add1"),s("span",{style:{color:"#E1E4E8"}},"("),s("span",{style:{color:"#FFAB70"}},"x"),s("span",{style:{color:"#E1E4E8"}},", "),s("span",{style:{color:"#FFAB70"}},"y"),s("span",{style:{color:"#E1E4E8"}},", "),s("span",{style:{color:"#FFAB70"}},"z"),s("span",{style:{color:"#E1E4E8"}},") {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"  "),s("span",{style:{color:"#F97583"}},"return"),s("span",{style:{color:"#E1E4E8"}}," x "),s("span",{style:{color:"#F97583"}},"+"),s("span",{style:{color:"#E1E4E8"}}," y "),s("span",{style:{color:"#F97583"}},"+"),s("span",{style:{color:"#E1E4E8"}}," z;")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"}")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F97583"}},"const"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#79B8FF"}},"add"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#F97583"}},"="),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#B392F0"}},"curry"),s("span",{style:{color:"#E1E4E8"}},"(add1);")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"console."),s("span",{style:{color:"#B392F0"}},"log"),s("span",{style:{color:"#E1E4E8"}},"("),s("span",{style:{color:"#B392F0"}},"add"),s("span",{style:{color:"#E1E4E8"}},"("),s("span",{style:{color:"#79B8FF"}},"1"),s("span",{style:{color:"#E1E4E8"}},", "),s("span",{style:{color:"#79B8FF"}},"2"),s("span",{style:{color:"#E1E4E8"}},", "),s("span",{style:{color:"#79B8FF"}},"3"),s("span",{style:{color:"#E1E4E8"}},"));")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"console."),s("span",{style:{color:"#B392F0"}},"log"),s("span",{style:{color:"#E1E4E8"}},"("),s("span",{style:{color:"#B392F0"}},"add"),s("span",{style:{color:"#E1E4E8"}},"("),s("span",{style:{color:"#79B8FF"}},"1"),s("span",{style:{color:"#E1E4E8"}},")("),s("span",{style:{color:"#79B8FF"}},"2"),s("span",{style:{color:"#E1E4E8"}},")("),s("span",{style:{color:"#79B8FF"}},"3"),s("span",{style:{color:"#E1E4E8"}},"));")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"console."),s("span",{style:{color:"#B392F0"}},"log"),s("span",{style:{color:"#E1E4E8"}},"("),s("span",{style:{color:"#B392F0"}},"add"),s("span",{style:{color:"#E1E4E8"}},"("),s("span",{style:{color:"#79B8FF"}},"1"),s("span",{style:{color:"#E1E4E8"}},", "),s("span",{style:{color:"#79B8FF"}},"2"),s("span",{style:{color:"#E1E4E8"}},")("),s("span",{style:{color:"#79B8FF"}},"3"),s("span",{style:{color:"#E1E4E8"}},"));")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"console."),s("span",{style:{color:"#B392F0"}},"log"),s("span",{style:{color:"#E1E4E8"}},"("),s("span",{style:{color:"#B392F0"}},"add"),s("span",{style:{color:"#E1E4E8"}},"("),s("span",{style:{color:"#79B8FF"}},"1"),s("span",{style:{color:"#E1E4E8"}},")("),s("span",{style:{color:"#79B8FF"}},"2"),s("span",{style:{color:"#E1E4E8"}},", "),s("span",{style:{color:"#79B8FF"}},"3"),s("span",{style:{color:"#E1E4E8"}},"));")])])]),s("pre",{class:"shiki github-light vp-code-light"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#D73A49"}},"function"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#6F42C1"}},"add1"),s("span",{style:{color:"#24292E"}},"("),s("span",{style:{color:"#E36209"}},"x"),s("span",{style:{color:"#24292E"}},", "),s("span",{style:{color:"#E36209"}},"y"),s("span",{style:{color:"#24292E"}},", "),s("span",{style:{color:"#E36209"}},"z"),s("span",{style:{color:"#24292E"}},") {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"  "),s("span",{style:{color:"#D73A49"}},"return"),s("span",{style:{color:"#24292E"}}," x "),s("span",{style:{color:"#D73A49"}},"+"),s("span",{style:{color:"#24292E"}}," y "),s("span",{style:{color:"#D73A49"}},"+"),s("span",{style:{color:"#24292E"}}," z;")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"}")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D73A49"}},"const"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#005CC5"}},"add"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#D73A49"}},"="),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#6F42C1"}},"curry"),s("span",{style:{color:"#24292E"}},"(add1);")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"console."),s("span",{style:{color:"#6F42C1"}},"log"),s("span",{style:{color:"#24292E"}},"("),s("span",{style:{color:"#6F42C1"}},"add"),s("span",{style:{color:"#24292E"}},"("),s("span",{style:{color:"#005CC5"}},"1"),s("span",{style:{color:"#24292E"}},", "),s("span",{style:{color:"#005CC5"}},"2"),s("span",{style:{color:"#24292E"}},", "),s("span",{style:{color:"#005CC5"}},"3"),s("span",{style:{color:"#24292E"}},"));")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"console."),s("span",{style:{color:"#6F42C1"}},"log"),s("span",{style:{color:"#24292E"}},"("),s("span",{style:{color:"#6F42C1"}},"add"),s("span",{style:{color:"#24292E"}},"("),s("span",{style:{color:"#005CC5"}},"1"),s("span",{style:{color:"#24292E"}},")("),s("span",{style:{color:"#005CC5"}},"2"),s("span",{style:{color:"#24292E"}},")("),s("span",{style:{color:"#005CC5"}},"3"),s("span",{style:{color:"#24292E"}},"));")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"console."),s("span",{style:{color:"#6F42C1"}},"log"),s("span",{style:{color:"#24292E"}},"("),s("span",{style:{color:"#6F42C1"}},"add"),s("span",{style:{color:"#24292E"}},"("),s("span",{style:{color:"#005CC5"}},"1"),s("span",{style:{color:"#24292E"}},", "),s("span",{style:{color:"#005CC5"}},"2"),s("span",{style:{color:"#24292E"}},")("),s("span",{style:{color:"#005CC5"}},"3"),s("span",{style:{color:"#24292E"}},"));")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"console."),s("span",{style:{color:"#6F42C1"}},"log"),s("span",{style:{color:"#24292E"}},"("),s("span",{style:{color:"#6F42C1"}},"add"),s("span",{style:{color:"#24292E"}},"("),s("span",{style:{color:"#005CC5"}},"1"),s("span",{style:{color:"#24292E"}},")("),s("span",{style:{color:"#005CC5"}},"2"),s("span",{style:{color:"#24292E"}},", "),s("span",{style:{color:"#005CC5"}},"3"),s("span",{style:{color:"#24292E"}},"));")])])]),s("button",{class:"collapse"})],-1),L=s("p",null,"实现：",-1),R=s("div",{class:"language-javascript"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"javascript"),s("pre",{class:"shiki github-dark vp-code-dark"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#F97583"}},"const"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#B392F0"}},"curry"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#F97583"}},"="),s("span",{style:{color:"#E1E4E8"}}," ("),s("span",{style:{color:"#FFAB70"}},"fn"),s("span",{style:{color:"#E1E4E8"}},", "),s("span",{style:{color:"#F97583"}},"..."),s("span",{style:{color:"#FFAB70"}},"args"),s("span",{style:{color:"#E1E4E8"}},") "),s("span",{style:{color:"#F97583"}},"=>")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"  "),s("span",{style:{color:"#6A737D"}},"// 函数的参数个数可以直接通过函数数的.length属性来访问")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"  args."),s("span",{style:{color:"#79B8FF"}},"length"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#F97583"}},">="),s("span",{style:{color:"#E1E4E8"}}," fn."),s("span",{style:{color:"#79B8FF"}},"length"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#6A737D"}},"// 这个判断很关键！！！")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"    "),s("span",{style:{color:"#F97583"}},"?"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#6A737D"}},"// 传入的参数大于等于原始函数fn的参数个数，则直接执行该函数")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"      "),s("span",{style:{color:"#B392F0"}},"fn"),s("span",{style:{color:"#E1E4E8"}},"("),s("span",{style:{color:"#F97583"}},"..."),s("span",{style:{color:"#E1E4E8"}},"args)")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"    "),s("span",{style:{color:"#F97583"}},":"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#6A737D"}},"/**")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#6A737D"}},"       * 传入的参数小于原始函数fn的参数个数时")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#6A737D"}},"       * 则继续对当前函数进行柯里化，返回一个接受所有参数（当前参数和剩余参数） 的函数")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#6A737D"}},"       */")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"      ("),s("span",{style:{color:"#F97583"}},"..."),s("span",{style:{color:"#FFAB70"}},"newArgs"),s("span",{style:{color:"#E1E4E8"}},") "),s("span",{style:{color:"#F97583"}},"=>"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#B392F0"}},"curry"),s("span",{style:{color:"#E1E4E8"}},"(fn, "),s("span",{style:{color:"#F97583"}},"..."),s("span",{style:{color:"#E1E4E8"}},"args, "),s("span",{style:{color:"#F97583"}},"..."),s("span",{style:{color:"#E1E4E8"}},"newArgs);")])])]),s("pre",{class:"shiki github-light vp-code-light"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#D73A49"}},"const"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#6F42C1"}},"curry"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#D73A49"}},"="),s("span",{style:{color:"#24292E"}}," ("),s("span",{style:{color:"#E36209"}},"fn"),s("span",{style:{color:"#24292E"}},", "),s("span",{style:{color:"#D73A49"}},"..."),s("span",{style:{color:"#E36209"}},"args"),s("span",{style:{color:"#24292E"}},") "),s("span",{style:{color:"#D73A49"}},"=>")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"  "),s("span",{style:{color:"#6A737D"}},"// 函数的参数个数可以直接通过函数数的.length属性来访问")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"  args."),s("span",{style:{color:"#005CC5"}},"length"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#D73A49"}},">="),s("span",{style:{color:"#24292E"}}," fn."),s("span",{style:{color:"#005CC5"}},"length"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#6A737D"}},"// 这个判断很关键！！！")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"    "),s("span",{style:{color:"#D73A49"}},"?"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#6A737D"}},"// 传入的参数大于等于原始函数fn的参数个数，则直接执行该函数")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"      "),s("span",{style:{color:"#6F42C1"}},"fn"),s("span",{style:{color:"#24292E"}},"("),s("span",{style:{color:"#D73A49"}},"..."),s("span",{style:{color:"#24292E"}},"args)")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"    "),s("span",{style:{color:"#D73A49"}},":"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#6A737D"}},"/**")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#6A737D"}},"       * 传入的参数小于原始函数fn的参数个数时")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#6A737D"}},"       * 则继续对当前函数进行柯里化，返回一个接受所有参数（当前参数和剩余参数） 的函数")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#6A737D"}},"       */")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"      ("),s("span",{style:{color:"#D73A49"}},"..."),s("span",{style:{color:"#E36209"}},"newArgs"),s("span",{style:{color:"#24292E"}},") "),s("span",{style:{color:"#D73A49"}},"=>"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#6F42C1"}},"curry"),s("span",{style:{color:"#24292E"}},"(fn, "),s("span",{style:{color:"#D73A49"}},"..."),s("span",{style:{color:"#24292E"}},"args, "),s("span",{style:{color:"#D73A49"}},"..."),s("span",{style:{color:"#24292E"}},"newArgs);")])])]),s("button",{class:"collapse"})],-1),G=s("blockquote",null,[s("p",null,"函数式编程其实是一个完整的编程思想，这里由于时间只写了很小的一部分及理解，今后会慢慢补充！")],-1);function H(n,I,K,Q,p,W){const c=g,r=E;return u(),d(r,{frontmatter:p.frontmatter,data:p.data},{"main-content-md":o(()=>[f,s("h2",C,[l("什么是函数式编程 "),t(c,{class:"header-anchor",href:"#什么是函数式编程","aria-label":'Permalink to "什么是函数式编程"'},{default:o(()=>[l("​")]),_:1})]),A,s("h2",B,[l("合成（Compose） "),t(c,{class:"header-anchor",href:"#合成-compose","aria-label":'Permalink to "合成（Compose）"'},{default:o(()=>[l("​")]),_:1})]),D,m,_,v,b,k,j,x,$,w,s("h2",z,[l("柯里化（Currying） "),t(c,{class:"header-anchor",href:"#柯里化-currying","aria-label":'Permalink to "柯里化（Currying）"'},{default:o(()=>[l("​")]),_:1})]),P,T,N,O,V,S,q,J,s("h3",M,[l("实现一个柯里化函数 "),t(c,{class:"header-anchor",href:"#实现一个柯里化函数","aria-label":'Permalink to "实现一个柯里化函数"'},{default:o(()=>[l("​")]),_:1})]),U,Z,L,R,G]),"main-header":o(()=>[a(n.$slots,"main-header")]),"main-header-after":o(()=>[a(n.$slots,"main-header-after")]),"main-nav":o(()=>[a(n.$slots,"main-nav")]),"main-content":o(()=>[a(n.$slots,"main-content")]),"main-content-after":o(()=>[a(n.$slots,"main-content-after")]),"main-nav-before":o(()=>[a(n.$slots,"main-nav-before")]),"main-nav-after":o(()=>[a(n.$slots,"main-nav-after")]),comment:o(()=>[a(n.$slots,"comment")]),footer:o(()=>[a(n.$slots,"footer")]),aside:o(()=>[a(n.$slots,"aside")]),"aside-custom":o(()=>[a(n.$slots,"aside-custom")]),default:o(()=>[a(n.$slots,"default")]),_:3},8,["frontmatter","data"])}const es=y(h,[["render",H]]);export{as as __pageData,es as default};
