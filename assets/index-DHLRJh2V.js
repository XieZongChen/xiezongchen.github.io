import{_ as p}from"./ValaxyMain.vue_vue_type_style_index_0_lang-CJwb-j0h.js";import{_ as d,u,c as h,w as e,p as g,o as m,a as l,b as s,d as a,r as n,e as y}from"./app-t0WzKcrM.js";import"./YunFooter.vue_vue_type_script_setup_true_lang-CJldLY-7.js";import"./YunCard.vue_vue_type_script_setup_true_lang-CgAMBqk4.js";import"./YunPageHeader.vue_vue_type_script_setup_true_lang-CQr6kV1W.js";import"./index-C7yU5XnD.js";const E="/assets/githubFork-DXjbwmTI.png",_="/assets/githubClone-4CTUSIgM.png",b="/assets/githubPR1-B6Vz8diQ.png",F="/assets/githubPR2-ttNN7NgT.png",f="/assets/githubPR3-DW2u9ibW.png",k="/assets/githubFlow-BjgQzmpJ.png",Cl=JSON.parse('{"title":"如何给开源项目贡献代码","description":"","frontmatter":{"title":"如何给开源项目贡献代码","date":"2021-08-23T00:00:00.000Z","categories":["工具"],"tags":["git"],"excerpt_type":"html"},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"Fork 代码","slug":"fork-代码","link":"#fork-代码","children":[]},{"level":2,"title":"clone 代码并安装依赖","slug":"clone-代码并安装依赖","link":"#clone-代码并安装依赖","children":[]},{"level":2,"title":"同步代码","slug":"同步代码","link":"#同步代码","children":[]},{"level":2,"title":"提交代码","slug":"提交代码","link":"#提交代码","children":[]},{"level":2,"title":"提交 PR","slug":"提交-pr","link":"#提交-pr","children":[]},{"level":2,"title":"开发注意事项","slug":"开发注意事项","link":"#开发注意事项","children":[{"level":3,"title":"单元测试","slug":"单元测试","link":"#单元测试","children":[]},{"level":3,"title":"git 分支","slug":"git-分支","link":"#git-分支","children":[]},{"level":3,"title":"开发操作流图示","slug":"开发操作流图示","link":"#开发操作流图示","children":[]}]}],"relativePath":"pages/posts/github/index.md","path":"/home/runner/work/xzc-blog/xzc-blog/pages/posts/github/index.md","lastUpdated":1709257929000}'),r=JSON.parse('{"title":"如何给开源项目贡献代码","description":"","frontmatter":{"title":"如何给开源项目贡献代码","date":"2021-08-23T00:00:00.000Z","categories":["工具"],"tags":["git"],"excerpt_type":"html"},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"Fork 代码","slug":"fork-代码","link":"#fork-代码","children":[]},{"level":2,"title":"clone 代码并安装依赖","slug":"clone-代码并安装依赖","link":"#clone-代码并安装依赖","children":[]},{"level":2,"title":"同步代码","slug":"同步代码","link":"#同步代码","children":[]},{"level":2,"title":"提交代码","slug":"提交代码","link":"#提交代码","children":[]},{"level":2,"title":"提交 PR","slug":"提交-pr","link":"#提交-pr","children":[]},{"level":2,"title":"开发注意事项","slug":"开发注意事项","link":"#开发注意事项","children":[{"level":3,"title":"单元测试","slug":"单元测试","link":"#单元测试","children":[]},{"level":3,"title":"git 分支","slug":"git-分支","link":"#git-分支","children":[]},{"level":3,"title":"开发操作流图示","slug":"开发操作流图示","link":"#开发操作流图示","children":[]}]}],"relativePath":"pages/posts/github/index.md","path":"/home/runner/work/xzc-blog/xzc-blog/pages/posts/github/index.md","lastUpdated":1709257929000}'),C={name:"pages/posts/github/index.md",data(){return{data:r,frontmatter:r.frontmatter,$frontmatter:r.frontmatter}},setup(){const t=u();t.meta.frontmatter=Object.assign(t.meta.frontmatter,r.frontmatter),g("pageData",r)}},v={id:"前言",tabindex:"-1"},B={id:"fork-代码",tabindex:"-1"},P=l("code",null,"git clone",-1),R=l("code",null,"git push",-1),x=l("img",{src:E,alt:"githubFork"},null,-1),D=l("p",null,"Fork 时请顺便点击一下旁边的“star”按钮。",-1),N={id:"clone-代码并安装依赖",tabindex:"-1"},$=l("p",null,"当点击完“Fork”按钮后，我们会发现项目的仓库名变为了我们自己的账号（如果没有自动跳转，则去自己仓库里找一下）。此时我们点击“Code”按钮，在下拉面板里选择适合自己的 Clone 方式，并复制 URL。",-1),A=l("img",{src:_,alt:"githubClone"},null,-1),U=l("p",null,"然后打开终端，进入自己想要存放项目代码的目录，执行：",-1),T=l("div",{class:"language-bash"},[l("button",{title:"Copy Code",class:"copy"}),l("span",{class:"lang"},"bash"),l("pre",{class:"shiki github-dark vp-code-dark"},[l("code",null,[l("span",{class:"line"},[l("span",{style:{color:"#B392F0"}},"git"),l("span",{style:{color:"#E1E4E8"}}," "),l("span",{style:{color:"#9ECBFF"}},"clone"),l("span",{style:{color:"#E1E4E8"}}," "),l("span",{style:{color:"#9ECBFF"}},"URL")])])]),l("pre",{class:"shiki github-light vp-code-light"},[l("code",null,[l("span",{class:"line"},[l("span",{style:{color:"#6F42C1"}},"git"),l("span",{style:{color:"#24292E"}}," "),l("span",{style:{color:"#032F62"}},"clone"),l("span",{style:{color:"#24292E"}}," "),l("span",{style:{color:"#032F62"}},"URL")])])]),l("button",{class:"collapse"})],-1),S=l("p",null,[s("其中 "),l("code",null,"URL"),s(" 为在 github 页面复制的 URL。等项目 clone 好后，终端进入项目，执行：")],-1),L=l("div",{class:"language-bash"},[l("button",{title:"Copy Code",class:"copy"}),l("span",{class:"lang"},"bash"),l("pre",{class:"shiki github-dark vp-code-dark"},[l("code",null,[l("span",{class:"line"},[l("span",{style:{color:"#B392F0"}},"npm"),l("span",{style:{color:"#E1E4E8"}}," "),l("span",{style:{color:"#9ECBFF"}},"install")])])]),l("pre",{class:"shiki github-light vp-code-light"},[l("code",null,[l("span",{class:"line"},[l("span",{style:{color:"#6F42C1"}},"npm"),l("span",{style:{color:"#24292E"}}," "),l("span",{style:{color:"#032F62"}},"install")])])]),l("button",{class:"collapse"})],-1),w=l("p",null,"此命令为安装项目依赖，大家也可以选择其他工具安装，如果安装缓慢或失败，请设置国内镜像。",-1),q={id:"同步代码",tabindex:"-1"},z=l("p",null,"由于我们代码来自我们自己仓库项目，而官方仓库代码发生改变时，我们自己仓库以及本地代码是不会同步更新的，所以我们需要手动来同步最新的代码。为了防止分支冲突，建议每次开发前都要同步官方仓库代码。首先设置项目的 upstream 仓库：",-1),I=l("div",{class:"language-bash"},[l("button",{title:"Copy Code",class:"copy"}),l("span",{class:"lang"},"bash"),l("pre",{class:"shiki github-dark vp-code-dark"},[l("code",null,[l("span",{class:"line"},[l("span",{style:{color:"#B392F0"}},"git"),l("span",{style:{color:"#E1E4E8"}}," "),l("span",{style:{color:"#9ECBFF"}},"remote"),l("span",{style:{color:"#E1E4E8"}}," "),l("span",{style:{color:"#9ECBFF"}},"add"),l("span",{style:{color:"#E1E4E8"}}," "),l("span",{style:{color:"#9ECBFF"}},"upstream"),l("span",{style:{color:"#E1E4E8"}}," "),l("span",{style:{color:"#9ECBFF"}},"https://github.com/TuSimple/naive-ui.git")])])]),l("pre",{class:"shiki github-light vp-code-light"},[l("code",null,[l("span",{class:"line"},[l("span",{style:{color:"#6F42C1"}},"git"),l("span",{style:{color:"#24292E"}}," "),l("span",{style:{color:"#032F62"}},"remote"),l("span",{style:{color:"#24292E"}}," "),l("span",{style:{color:"#032F62"}},"add"),l("span",{style:{color:"#24292E"}}," "),l("span",{style:{color:"#032F62"}},"upstream"),l("span",{style:{color:"#24292E"}}," "),l("span",{style:{color:"#032F62"}},"https://github.com/TuSimple/naive-ui.git")])])]),l("button",{class:"collapse"})],-1),j=l("p",null,"需要注意，此命令在 clone 项目后只需执行一次，命令中的 URL 为官方仓库的 URL。设置完 upstream 仓库后，我们需要拉取 upstream 仓库的最新代码，将本地分支切换到对应分支，然后合并最新代码到本地分支：",-1),O=l("div",{class:"language-bash"},[l("button",{title:"Copy Code",class:"copy"}),l("span",{class:"lang"},"bash"),l("pre",{class:"shiki github-dark vp-code-dark"},[l("code",null,[l("span",{class:"line"},[l("span",{style:{color:"#6A737D"}},"# 拉取 upstream 仓库 main 分支最新代码")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#B392F0"}},"git"),l("span",{style:{color:"#E1E4E8"}}," "),l("span",{style:{color:"#9ECBFF"}},"fetch"),l("span",{style:{color:"#E1E4E8"}}," "),l("span",{style:{color:"#9ECBFF"}},"upstream"),l("span",{style:{color:"#E1E4E8"}}," "),l("span",{style:{color:"#9ECBFF"}},"main")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#6A737D"}},"# 切换分支")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#B392F0"}},"git"),l("span",{style:{color:"#E1E4E8"}}," "),l("span",{style:{color:"#9ECBFF"}},"checkout"),l("span",{style:{color:"#E1E4E8"}}," "),l("span",{style:{color:"#9ECBFF"}},"main")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#6A737D"}},"# 合并 main 分支最新代码到本地当前分支")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#B392F0"}},"git"),l("span",{style:{color:"#E1E4E8"}}," "),l("span",{style:{color:"#9ECBFF"}},"merge"),l("span",{style:{color:"#E1E4E8"}}," "),l("span",{style:{color:"#9ECBFF"}},"upstream/main")])])]),l("pre",{class:"shiki github-light vp-code-light"},[l("code",null,[l("span",{class:"line"},[l("span",{style:{color:"#6A737D"}},"# 拉取 upstream 仓库 main 分支最新代码")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#6F42C1"}},"git"),l("span",{style:{color:"#24292E"}}," "),l("span",{style:{color:"#032F62"}},"fetch"),l("span",{style:{color:"#24292E"}}," "),l("span",{style:{color:"#032F62"}},"upstream"),l("span",{style:{color:"#24292E"}}," "),l("span",{style:{color:"#032F62"}},"main")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#6A737D"}},"# 切换分支")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#6F42C1"}},"git"),l("span",{style:{color:"#24292E"}}," "),l("span",{style:{color:"#032F62"}},"checkout"),l("span",{style:{color:"#24292E"}}," "),l("span",{style:{color:"#032F62"}},"main")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#6A737D"}},"# 合并 main 分支最新代码到本地当前分支")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#6F42C1"}},"git"),l("span",{style:{color:"#24292E"}}," "),l("span",{style:{color:"#032F62"}},"merge"),l("span",{style:{color:"#24292E"}}," "),l("span",{style:{color:"#032F62"}},"upstream/main")])])]),l("button",{class:"collapse"})],-1),V=l("p",null,"需要注意，此一系列操作需要随时做，保证我们本地代码永远是官方最新代码。",-1),J={id:"提交代码",tabindex:"-1"},Q=l("div",{class:"language-bash"},[l("button",{title:"Copy Code",class:"copy"}),l("span",{class:"lang"},"bash"),l("pre",{class:"shiki github-dark vp-code-dark"},[l("code",null,[l("span",{class:"line"},[l("span",{style:{color:"#6A737D"}},"# 新功能")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#B392F0"}},"git"),l("span",{style:{color:"#E1E4E8"}}," "),l("span",{style:{color:"#9ECBFF"}},"commit"),l("span",{style:{color:"#E1E4E8"}}," "),l("span",{style:{color:"#79B8FF"}},"-am"),l("span",{style:{color:"#E1E4E8"}}," "),l("span",{style:{color:"#9ECBFF"}},"'feat(button): add textColor prop'")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#6A737D"}},"# bug修复")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#B392F0"}},"git"),l("span",{style:{color:"#E1E4E8"}}," "),l("span",{style:{color:"#9ECBFF"}},"commit"),l("span",{style:{color:"#E1E4E8"}}," "),l("span",{style:{color:"#79B8FF"}},"-am"),l("span",{style:{color:"#E1E4E8"}}," "),l("span",{style:{color:"#9ECBFF"}},"'fix(button): fix bug for textColor prop'")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#6A737D"}},"# 文档修改")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#B392F0"}},"git"),l("span",{style:{color:"#E1E4E8"}}," "),l("span",{style:{color:"#9ECBFF"}},"commit"),l("span",{style:{color:"#E1E4E8"}}," "),l("span",{style:{color:"#79B8FF"}},"-am"),l("span",{style:{color:"#E1E4E8"}}," "),l("span",{style:{color:"#9ECBFF"}},"'docs(button): add demo for textColor prop'")])])]),l("pre",{class:"shiki github-light vp-code-light"},[l("code",null,[l("span",{class:"line"},[l("span",{style:{color:"#6A737D"}},"# 新功能")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#6F42C1"}},"git"),l("span",{style:{color:"#24292E"}}," "),l("span",{style:{color:"#032F62"}},"commit"),l("span",{style:{color:"#24292E"}}," "),l("span",{style:{color:"#005CC5"}},"-am"),l("span",{style:{color:"#24292E"}}," "),l("span",{style:{color:"#032F62"}},"'feat(button): add textColor prop'")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#6A737D"}},"# bug修复")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#6F42C1"}},"git"),l("span",{style:{color:"#24292E"}}," "),l("span",{style:{color:"#032F62"}},"commit"),l("span",{style:{color:"#24292E"}}," "),l("span",{style:{color:"#005CC5"}},"-am"),l("span",{style:{color:"#24292E"}}," "),l("span",{style:{color:"#032F62"}},"'fix(button): fix bug for textColor prop'")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#6A737D"}},"# 文档修改")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#6F42C1"}},"git"),l("span",{style:{color:"#24292E"}}," "),l("span",{style:{color:"#032F62"}},"commit"),l("span",{style:{color:"#24292E"}}," "),l("span",{style:{color:"#005CC5"}},"-am"),l("span",{style:{color:"#24292E"}}," "),l("span",{style:{color:"#032F62"}},"'docs(button): add demo for textColor prop'")])])]),l("button",{class:"collapse"})],-1),W={id:"提交-pr",tabindex:"-1"},H=l("p",null,"PR 是 Pull requests 的简称，这里指将自己修改的内容提交到官方仓库的项目中。首先我们需要推送本地分支到 github 我们自己仓库中的项目：",-1),M=l("div",{class:"language-bash"},[l("button",{title:"Copy Code",class:"copy"}),l("span",{class:"lang"},"bash"),l("pre",{class:"shiki github-dark vp-code-dark"},[l("code",null,[l("span",{class:"line"},[l("span",{style:{color:"#B392F0"}},"git"),l("span",{style:{color:"#E1E4E8"}}," "),l("span",{style:{color:"#9ECBFF"}},"push"),l("span",{style:{color:"#E1E4E8"}}," "),l("span",{style:{color:"#79B8FF"}},"--set-upstream"),l("span",{style:{color:"#E1E4E8"}}," "),l("span",{style:{color:"#9ECBFF"}},"origin"),l("span",{style:{color:"#E1E4E8"}}," "),l("span",{style:{color:"#9ECBFF"}},"branchName")])])]),l("pre",{class:"shiki github-light vp-code-light"},[l("code",null,[l("span",{class:"line"},[l("span",{style:{color:"#6F42C1"}},"git"),l("span",{style:{color:"#24292E"}}," "),l("span",{style:{color:"#032F62"}},"push"),l("span",{style:{color:"#24292E"}}," "),l("span",{style:{color:"#005CC5"}},"--set-upstream"),l("span",{style:{color:"#24292E"}}," "),l("span",{style:{color:"#032F62"}},"origin"),l("span",{style:{color:"#24292E"}}," "),l("span",{style:{color:"#032F62"}},"branchName")])])]),l("button",{class:"collapse"})],-1),Z=l("p",null,[s("其中 "),l("code",null,"branchName"),s(" 为我们要推送的分支名。推送成功后，我们需要到自己仓库的项目中，点击 Pull requests 标签，点击 New pull request 按钮。")],-1),G=l("img",{src:b,alt:"githubPR1"},null,-1),X=l("p",null,"点击 New pull request 按钮后我们跳到了官方仓库的项目中，不用担心，继续操作。分别选择目标分支和源分支，然后检查提交内容是否正确，最后点击 Create pull request 按钮。",-1),Y=l("img",{src:F,alt:"githubPR2"},null,-1),K=l("p",null,"然后我们来到 PR 信息页。PR 的标题会默认取 commit 信息，如果有多条 commit 信息时，建议起一个简洁、易懂并具有概括性的 PR 标题，当维护者选择合并 commit 信息时，会默认选择 PR 标题当做合并后的 commit 信息。PR 描述可以写自己为什么做出修改、修改的思路、关联 issues 等信息。做完以上步骤后，就可以点击 Create pull request 按钮提交。",-1),ll=l("p",null,"大多数开源项目都有配置 PR 内容检测，当我们提交 PR 后会自动进行检测。有的项目会配置 Contributors 检测，即只有 Contributors 以上权限提交 PR 时进行检测。这就意味着如果你是第一次提交这个项目的 PR，检测机制不会被触发，当维护人员认为你的修改有必要时才会主动触发检测。我们提交 PR 后要经常注意 PR 的状态：查看提交是否被检测出问题，查看是否有维护者留言要求优化提交等。下图为 PR 检测时的样子，黄色为检测中，绿色为检测完毕且无问题，红色为检测完毕但有问题。",-1),sl=l("img",{src:f,alt:"githubPR3"},null,-1),el={id:"开发注意事项",tabindex:"-1"},tl={id:"单元测试",tabindex:"-1"},ol={id:"git-分支",tabindex:"-1"},al=l("p",null,"大多数开源项目都要求开发者提交分支时保持分支的纯净，即：",-1),nl=l("ol",null,[l("li",null,"保证自己提交分支上只有自己的 commit 信息；"),l("li",null,"保证自己提交分支上 commit 信息清晰易懂不多余。")],-1),rl=l("p",null,"想要保证这两点，需要开发者在本地开发时养成良好的 git 习惯：",-1),il=l("ol",null,[l("li",null,"不要在主分支（官方仓库的分支）上直接开发，每次开发都从主分支检出功能分支进行开发。"),l("li",null,[s("经常同步代码，如果代码有更新要使用 "),l("code",null,"git rebase"),s(" 检测是否有冲突，有就及时解决。")]),l("li",null,"注意开源项目的分支规则，不要乱检出分支乱合分支。"),l("li",null,[s("如果发现自己分支有很多多余 commit 信息，也可以用 "),l("code",null,"git rebase"),s(" 合并。")])],-1),cl={id:"开发操作流图示",tabindex:"-1"},pl=l("p",null,"为了方便大家理解整个流程的操作，这里放一个流程图。",-1),dl=l("img",{src:k,alt:"GitHubFlow"},null,-1);function ul(t,hl,gl,ml,i,yl){const o=y,c=p;return m(),h(c,{frontmatter:i.frontmatter,data:i.data},{"main-content-md":e(()=>[l("h2",v,[s("前言 "),a(o,{class:"header-anchor",href:"#前言","aria-label":'Permalink to "前言"'},{default:e(()=>[s("​")]),_:1})]),l("p",null,[s("“开源”通常指开源模型，是一种去中心化的软件开发模型，它鼓励开放式协作，即“任何创新或生产系统都依赖于以目标为导向但松散协调的参与者进行交互来创建具有经济价值的产品（或服务），它们可以同时提供给贡献者和非贡献者”。由于开源具有包容性、众创性等诸多优点，使得众多开源软件及项目都获得了良好的可持续发展。参与开源项目也可以提升开发者的代码规范、架构设计、代码阅读等多项能力，那么如何参与开源项目贡献代码呢？目前出名的开源社区有 github、gitee 等，本文基于 "),a(o,{href:"https://github.com/TuSimple/naive-ui",target:"_blank",rel:"noreferrer"},{default:e(()=>[s("Naive UI")]),_:1}),s(" 来介绍如何在 github 上贡献代码（gitee 操作基本相同）。")]),l("h2",B,[s("Fork 代码 "),a(o,{class:"header-anchor",href:"#fork-代码","aria-label":'Permalink to "Fork 代码"'},{default:e(()=>[s("​")]),_:1})]),l("p",null,[s("首先我们要明确一个概念，我们在 github 中进入一个开源项目后，实际是进入了别人/组织的仓库里的具体某个项目，这点从仓库名可以看出。例如：进入 "),a(o,{href:"https://github.com/TuSimple/naive-ui",target:"_blank",rel:"noreferrer"},{default:e(()=>[s("Naive UI")]),_:1}),s(" 后，仓库名为 TuSimple/naive-ui，即 TuSimple 组织的 naive-ui 项目。此时你如果直接 "),P,s(" 项目并修改项目内容，是无法使用 "),R,s(" 推送的，因为没有仓库权限。而且就算有仓库权限，我也不建议对组织仓库的代码直接推送，这会使项目分支混乱，增加维护成本。所以，我们需要使用 Fork 操作将代码复制到自己仓库一份，点击仓库最右侧的“Fork”按钮即可。")]),x,D,l("h2",N,[s("clone 代码并安装依赖 "),a(o,{class:"header-anchor",href:"#clone-代码并安装依赖","aria-label":'Permalink to "clone 代码并安装依赖"'},{default:e(()=>[s("​")]),_:1})]),$,A,U,T,S,L,w,l("h2",q,[s("同步代码 "),a(o,{class:"header-anchor",href:"#同步代码","aria-label":'Permalink to "同步代码"'},{default:e(()=>[s("​")]),_:1})]),z,I,j,O,V,l("h2",J,[s("提交代码 "),a(o,{class:"header-anchor",href:"#提交代码","aria-label":'Permalink to "提交代码"'},{default:e(()=>[s("​")]),_:1})]),l("p",null,[s("通常开源项目都十分注重提交格式，不规范的提交格式会导致维护人员拒绝合并我们的代码（有的项目甚至配了提交检测工具，不规范的提交无法提交成功）。开源社区目前使用最多的是 "),a(o,{href:"https://docs.google.com/document/d/1QrDFcIiPjSLDn3EL15IJygNPiHORgU1_OOAqWjiDU5Y/edit",target:"_blank",rel:"noreferrer"},{default:e(()=>[s("Angular 规范")]),_:1}),s(" ，规范里写的很详细，这里就不过多赘述，列几个经常用到的：")]),Q,l("h2",W,[s("提交 PR "),a(o,{class:"header-anchor",href:"#提交-pr","aria-label":'Permalink to "提交 PR"'},{default:e(()=>[s("​")]),_:1})]),H,M,Z,G,X,Y,K,ll,sl,l("h2",el,[s("开发注意事项 "),a(o,{class:"header-anchor",href:"#开发注意事项","aria-label":'Permalink to "开发注意事项"'},{default:e(()=>[s("​")]),_:1})]),l("h3",tl,[s("单元测试 "),a(o,{class:"header-anchor",href:"#单元测试","aria-label":'Permalink to "单元测试"'},{default:e(()=>[s("​")]),_:1})]),l("p",null,[s("大多数开源项目都有自己的单元测试方案，并且会要求开发者添加当前 PR 的测试用例。单元测试既可以保证新功能的稳定可用，又可以降低项目代码修改、重构时的危险性，所以开始在开源社区贡献代码之前需要学习写单元测试。单元测试的学习非常简单，并且虽然现在不同框架都有自己单元测试方案，但实际大同小异，学会一种其他就都会写。Naive UI 使用的单元测试方案为 "),a(o,{href:"https://vue-test-utils.vuejs.org/zh/",target:"_blank",rel:"noreferrer"},{default:e(()=>[s("vue test utils")]),_:1}),s(" 。")]),l("h3",ol,[s("git 分支 "),a(o,{class:"header-anchor",href:"#git-分支","aria-label":'Permalink to "git 分支"'},{default:e(()=>[s("​")]),_:1})]),al,nl,rl,il,l("h3",cl,[s("开发操作流图示 "),a(o,{class:"header-anchor",href:"#开发操作流图示","aria-label":'Permalink to "开发操作流图示"'},{default:e(()=>[s("​")]),_:1})]),pl,dl]),"main-header":e(()=>[n(t.$slots,"main-header")]),"main-header-after":e(()=>[n(t.$slots,"main-header-after")]),"main-nav":e(()=>[n(t.$slots,"main-nav")]),"main-content":e(()=>[n(t.$slots,"main-content")]),"main-content-after":e(()=>[n(t.$slots,"main-content-after")]),"main-nav-before":e(()=>[n(t.$slots,"main-nav-before")]),"main-nav-after":e(()=>[n(t.$slots,"main-nav-after")]),comment:e(()=>[n(t.$slots,"comment")]),footer:e(()=>[n(t.$slots,"footer")]),aside:e(()=>[n(t.$slots,"aside")]),"aside-custom":e(()=>[n(t.$slots,"aside-custom")]),default:e(()=>[n(t.$slots,"default")]),_:3},8,["frontmatter","data"])}const vl=d(C,[["render",ul]]);export{Cl as __pageData,vl as default};
