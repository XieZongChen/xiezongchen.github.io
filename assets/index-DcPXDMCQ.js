import{_ as E}from"./ValaxyMain.vue_vue_type_style_index_0_lang-CJwb-j0h.js";import{_ as i,u as y,c as d,w as n,p as u,o as h,a as s,b as l,d as a,r as t,e as m}from"./app-t0WzKcrM.js";import"./YunFooter.vue_vue_type_script_setup_true_lang-CJldLY-7.js";import"./YunCard.vue_vue_type_script_setup_true_lang-CgAMBqk4.js";import"./YunPageHeader.vue_vue_type_script_setup_true_lang-CQr6kV1W.js";import"./index-C7yU5XnD.js";const F="/assets/webpackOptSourceMap-DNDmmLbD.png",Ls=JSON.parse('{"title":"webpack实战——性能优化","description":"","frontmatter":{"title":"webpack实战——性能优化","date":"2021-05-10T00:00:00.000Z","categories":["工具"],"tags":["Webpack"]},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"HMR","slug":"hmr","link":"#hmr","children":[]},{"level":2,"title":"source map","slug":"source-map","link":"#source-map","children":[]},{"level":2,"title":"oneOf","slug":"oneof","link":"#oneof","children":[]},{"level":2,"title":"缓存","slug":"缓存","link":"#缓存","children":[{"level":3,"title":"babel 缓存","slug":"babel-缓存","link":"#babel-缓存","children":[]},{"level":3,"title":"资源缓存","slug":"资源缓存","link":"#资源缓存","children":[]}]},{"level":2,"title":"tree shaking","slug":"tree-shaking","link":"#tree-shaking","children":[]},{"level":2,"title":"code split","slug":"code-split","link":"#code-split","children":[{"level":3,"title":"通过多入口实现","slug":"通过多入口实现","link":"#通过多入口实现","children":[]},{"level":3,"title":"通过 splitChunks 实现","slug":"通过-splitchunks-实现","link":"#通过-splitchunks-实现","children":[]},{"level":3,"title":"通过 js 代码实现","slug":"通过-js-代码实现","link":"#通过-js-代码实现","children":[]}]}],"relativePath":"pages/posts/webpack-optimization/index.md","path":"/home/runner/work/xzc-blog/xzc-blog/pages/posts/webpack-optimization/index.md","lastUpdated":1709257929000}'),c=JSON.parse('{"title":"webpack实战——性能优化","description":"","frontmatter":{"title":"webpack实战——性能优化","date":"2021-05-10T00:00:00.000Z","categories":["工具"],"tags":["Webpack"]},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"HMR","slug":"hmr","link":"#hmr","children":[]},{"level":2,"title":"source map","slug":"source-map","link":"#source-map","children":[]},{"level":2,"title":"oneOf","slug":"oneof","link":"#oneof","children":[]},{"level":2,"title":"缓存","slug":"缓存","link":"#缓存","children":[{"level":3,"title":"babel 缓存","slug":"babel-缓存","link":"#babel-缓存","children":[]},{"level":3,"title":"资源缓存","slug":"资源缓存","link":"#资源缓存","children":[]}]},{"level":2,"title":"tree shaking","slug":"tree-shaking","link":"#tree-shaking","children":[]},{"level":2,"title":"code split","slug":"code-split","link":"#code-split","children":[{"level":3,"title":"通过多入口实现","slug":"通过多入口实现","link":"#通过多入口实现","children":[]},{"level":3,"title":"通过 splitChunks 实现","slug":"通过-splitchunks-实现","link":"#通过-splitchunks-实现","children":[]},{"level":3,"title":"通过 js 代码实现","slug":"通过-js-代码实现","link":"#通过-js-代码实现","children":[]}]}],"relativePath":"pages/posts/webpack-optimization/index.md","path":"/home/runner/work/xzc-blog/xzc-blog/pages/posts/webpack-optimization/index.md","lastUpdated":1709257929000}'),_={name:"pages/posts/webpack-optimization/index.md",data(){return{data:c,frontmatter:c.frontmatter,$frontmatter:c.frontmatter}},setup(){const o=y();o.meta.frontmatter=Object.assign(o.meta.frontmatter,c.frontmatter),u("pageData",c)}},g={id:"前言",tabindex:"-1"},k=s("p",null,"我们已经学习完了开发环境和成产环境的配置，接下来学习 webpack 的性能优化。从环境角度讲，性能优化分为开发环境性能优化和生产环境性能优化。对于开发环境，我们需要优化打包构建速度、优化代码调试。对于生产环境，我们需要优化打包构建速度、优化代码运行性能。",-1),b={id:"hmr",tabindex:"-1"},C=s("p",null,"在之前我们搭建的开发环境中，由于配置了 devServer，所以当文件有修改时会重新编译。但是我们发现如果我只改动 css 文件，保存时 js 文件也一样会被重新编译。并且如果我们写若干个 js 模块内容并将其引入 index.js 文件中，当我修改其中一个模块的内容时，其他模块也会被重新编译。这就说明 devServer 更新时是全量编译的，这意味着以后项目变的非常大并且有非常多的模块时，我只改动其中一个模块后整个项目的模块都要重新编译，这样编译的速度会非常慢，使开发者的体验很差。而 HMR（hot module replacement）就可以帮助我们进行优化，使得我们修改一个模块时，只重新编译我们所修改的模块，而不是打包所有模块，极大提升构建速度。",-1),v=s("p",null,"HMR 的配置很简单，只需要在 devServer 配置项中添加 hot 配置即可。",-1),f=s("div",{class:"language-javascript"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"javascript"),s("pre",{class:"shiki github-dark vp-code-dark"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#79B8FF"}},"module"),s("span",{style:{color:"#E1E4E8"}},"."),s("span",{style:{color:"#79B8FF"}},"exports"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#F97583"}},"="),s("span",{style:{color:"#E1E4E8"}}," {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"  "),s("span",{style:{color:"#6A737D"}},"// ...此处省略其他配置")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"  devServer: {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"    contentBase: "),s("span",{style:{color:"#B392F0"}},"resolve"),s("span",{style:{color:"#E1E4E8"}},"(__dirname, "),s("span",{style:{color:"#9ECBFF"}},'"dist"'),s("span",{style:{color:"#E1E4E8"}},"),")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"    compress: "),s("span",{style:{color:"#79B8FF"}},"true"),s("span",{style:{color:"#E1E4E8"}},",")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"    port: "),s("span",{style:{color:"#79B8FF"}},"3000"),s("span",{style:{color:"#E1E4E8"}},",")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"    open: "),s("span",{style:{color:"#79B8FF"}},"true"),s("span",{style:{color:"#E1E4E8"}},",")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"    hot: "),s("span",{style:{color:"#79B8FF"}},"true"),s("span",{style:{color:"#E1E4E8"}},",")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"  },")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"};")])])]),s("pre",{class:"shiki github-light vp-code-light"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#005CC5"}},"module"),s("span",{style:{color:"#24292E"}},"."),s("span",{style:{color:"#005CC5"}},"exports"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#D73A49"}},"="),s("span",{style:{color:"#24292E"}}," {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"  "),s("span",{style:{color:"#6A737D"}},"// ...此处省略其他配置")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"  devServer: {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"    contentBase: "),s("span",{style:{color:"#6F42C1"}},"resolve"),s("span",{style:{color:"#24292E"}},"(__dirname, "),s("span",{style:{color:"#032F62"}},'"dist"'),s("span",{style:{color:"#24292E"}},"),")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"    compress: "),s("span",{style:{color:"#005CC5"}},"true"),s("span",{style:{color:"#24292E"}},",")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"    port: "),s("span",{style:{color:"#005CC5"}},"3000"),s("span",{style:{color:"#24292E"}},",")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"    open: "),s("span",{style:{color:"#005CC5"}},"true"),s("span",{style:{color:"#24292E"}},",")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"    hot: "),s("span",{style:{color:"#005CC5"}},"true"),s("span",{style:{color:"#24292E"}},",")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"  },")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"};")])])]),s("button",{class:"collapse"})],-1),B=s("p",null,"配置后我们发现，只有样式文件的 HMR 是生效的，这是因为 style-loader 内部实现了这个功能。 而 js 文件和 html 文件默认是不能使用 HMR 功能的，html 文件开启 devServer 后甚至无法热更新。解决 html 热更新需要以下配置：",-1),j=s("div",{class:"language-javascript"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"javascript"),s("pre",{class:"shiki github-dark vp-code-dark"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#79B8FF"}},"module"),s("span",{style:{color:"#E1E4E8"}},"."),s("span",{style:{color:"#79B8FF"}},"exports"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#F97583"}},"="),s("span",{style:{color:"#E1E4E8"}}," {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"  entry: ["),s("span",{style:{color:"#9ECBFF"}},'"./src/index.js"'),s("span",{style:{color:"#E1E4E8"}},", "),s("span",{style:{color:"#9ECBFF"}},'"./index.html"'),s("span",{style:{color:"#E1E4E8"}},"],")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"  "),s("span",{style:{color:"#6A737D"}},"// ...此处省略其他配置")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"};")])])]),s("pre",{class:"shiki github-light vp-code-light"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#005CC5"}},"module"),s("span",{style:{color:"#24292E"}},"."),s("span",{style:{color:"#005CC5"}},"exports"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#D73A49"}},"="),s("span",{style:{color:"#24292E"}}," {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"  entry: ["),s("span",{style:{color:"#032F62"}},'"./src/index.js"'),s("span",{style:{color:"#24292E"}},", "),s("span",{style:{color:"#032F62"}},'"./index.html"'),s("span",{style:{color:"#24292E"}},"],")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"  "),s("span",{style:{color:"#6A737D"}},"// ...此处省略其他配置")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"};")])])]),s("button",{class:"collapse"})],-1),D=s("p",null,"我们将 index.html 文件加入了入口文件的配置，这样便能解决其热更新的问题。目前我们构建的是单页面应用，即只有一个 html 文件，所以不用而且没必要做 HMR 功能。我们只要解决 js 文件的 HMR 功能即可，需要修改 js 代码，添加支持 HMR 功能的代码。",-1),A=s("div",{class:"language-javascript"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"javascript"),s("pre",{class:"shiki github-dark vp-code-dark"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#F97583"}},"import"),s("span",{style:{color:"#E1E4E8"}}," print "),s("span",{style:{color:"#F97583"}},"from"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},'"./print"'),s("span",{style:{color:"#E1E4E8"}},";")]),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#B392F0"}},"print"),s("span",{style:{color:"#E1E4E8"}},"();")]),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F97583"}},"if"),s("span",{style:{color:"#E1E4E8"}}," ("),s("span",{style:{color:"#79B8FF"}},"module"),s("span",{style:{color:"#E1E4E8"}},".hot) {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"  "),s("span",{style:{color:"#79B8FF"}},"module"),s("span",{style:{color:"#E1E4E8"}},".hot."),s("span",{style:{color:"#B392F0"}},"accept"),s("span",{style:{color:"#E1E4E8"}},"("),s("span",{style:{color:"#9ECBFF"}},'".print.js"'),s("span",{style:{color:"#E1E4E8"}},", () "),s("span",{style:{color:"#F97583"}},"=>"),s("span",{style:{color:"#E1E4E8"}}," {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"    "),s("span",{style:{color:"#B392F0"}},"print"),s("span",{style:{color:"#E1E4E8"}},"();")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"  });")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"}")])])]),s("pre",{class:"shiki github-light vp-code-light"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#D73A49"}},"import"),s("span",{style:{color:"#24292E"}}," print "),s("span",{style:{color:"#D73A49"}},"from"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},'"./print"'),s("span",{style:{color:"#24292E"}},";")]),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#6F42C1"}},"print"),s("span",{style:{color:"#24292E"}},"();")]),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D73A49"}},"if"),s("span",{style:{color:"#24292E"}}," ("),s("span",{style:{color:"#005CC5"}},"module"),s("span",{style:{color:"#24292E"}},".hot) {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"  "),s("span",{style:{color:"#005CC5"}},"module"),s("span",{style:{color:"#24292E"}},".hot."),s("span",{style:{color:"#6F42C1"}},"accept"),s("span",{style:{color:"#24292E"}},"("),s("span",{style:{color:"#032F62"}},'".print.js"'),s("span",{style:{color:"#24292E"}},", () "),s("span",{style:{color:"#D73A49"}},"=>"),s("span",{style:{color:"#24292E"}}," {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"    "),s("span",{style:{color:"#6F42C1"}},"print"),s("span",{style:{color:"#24292E"}},"();")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"  });")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"}")])])]),s("button",{class:"collapse"})],-1),x=s("p",null,"这句代码的 module 是一个全局中的变量，并查看 module 中是否有 hot 属性，hot 属性默认为 undefined 或 false，一旦 module.hot 为 true，说明开启了 HMR 功能，这时候我们便运行里面的 HMR 功能代码。module.hot.accept() 方法会监听第一个参数传入文件的变化，一旦发生变化会执行第二个回调函数参数，其他模块不会重新打包构建。",-1),w=s("blockquote",null,[s("p",null,"注意：js 文件的 HMR 功能只需要处理非入口文件的其他文件。")],-1),M={id:"source-map",tabindex:"-1"},P=s("p",null,"source map 是一种提供源代码到构建后代码映射的技术。如果构建后代码出错，由于代码已被打包，我们很难追踪出错代码的位置。而 source map 可以通过映射源代码到构建后的代码，使得可以追踪源代码错误。 开启 source mep 功能我们只需在 webpack.config.js 中添加配置：",-1),$=s("div",{class:"language-javascript"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"javascript"),s("pre",{class:"shiki github-dark vp-code-dark"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#79B8FF"}},"module"),s("span",{style:{color:"#E1E4E8"}},"."),s("span",{style:{color:"#79B8FF"}},"exports"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#F97583"}},"="),s("span",{style:{color:"#E1E4E8"}}," {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"  devtool: "),s("span",{style:{color:"#9ECBFF"}},'"source-map"'),s("span",{style:{color:"#E1E4E8"}},",")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"  "),s("span",{style:{color:"#6A737D"}},"// ...此处省略其他配置")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"};")])])]),s("pre",{class:"shiki github-light vp-code-light"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#005CC5"}},"module"),s("span",{style:{color:"#24292E"}},"."),s("span",{style:{color:"#005CC5"}},"exports"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#D73A49"}},"="),s("span",{style:{color:"#24292E"}}," {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"  devtool: "),s("span",{style:{color:"#032F62"}},'"source-map"'),s("span",{style:{color:"#24292E"}},",")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"  "),s("span",{style:{color:"#6A737D"}},"// ...此处省略其他配置")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"};")])])]),s("button",{class:"collapse"})],-1),R=s("p",null,"配置后我们进行编译，会发现 dist 目录下会多出映射文件。",-1),H=s("img",{src:F,alt:"webpackOptSourceMap"},null,-1),O=s("p",null,[l("以上只是 source map 最基本的配置，它还有几个参数可配置，具体写法为 "),s("code",null,"[inline-|hidden-|eval-][nosources-][cheap-[module-]]source-map"),l("。参数位置不可改变。")],-1),S=s("p",null,[s("code",null,"source-map"),l(" 为外部 source map，它通过 .map 内的映射信息将错误映射回源代码，所以这个配置可以提示错误代码的准确信息和源代码的错误位置。")],-1),z=s("p",null,[s("code",null,"inline-source-map"),l(" 为内联 source map，它不会生成映射文件，而映射信息变为 base64 后嵌入在对应 js 文件内部的结尾处，这种内联只生成一个内联映射信息。这个配置可以提示错误代码的准确信息和源代码的错误位置。")],-1),N=s("p",null,[s("code",null,"hidden-source-map"),l(" 为外部 source map，它会在外部生成一个以 .map 结尾的文件存放映射信息。这个配置可以提示错误代码的原因，但是没有错误的位置，而且不能追踪源代码的错误，只能提示到构建后代码的错误位置。")],-1),V=s("p",null,[s("code",null,"eval-source-map"),l(" 也为内联 source map，与 inline 不同的是，它会给每一个文件都生成对应的映射信息并放在 eval 函数内。这个配置可以提示错误代码的准确信息和源代码的错误位置。")],-1),T=s("p",null,[s("code",null,"nosources-source-map"),l(" 也会生成一个外部 source map。这个配置可以提示错误代码的准确信息，但是无法追踪源代码的错误位置。")],-1),J=s("p",null,[s("code",null,"cheap-source-map"),l(" 为外部 source map。这个配置可以提示错误代码的行信息和源代码的错误行位置，它只能精确到错误的行数，无法精确到列信息（column-mappings）。并且其不包含 loader 的 sourcemap（譬如 babel 的 sourcemap）。")],-1),L=s("p",null,[s("code",null,"cheap-module-source-map"),l(" 为外部 source map。。这个配置可以提示错误代码的行信息和源代码的错误行位置，它只能精确到错误的行数，无法精确到列信息（column-mappings）。同时 loader 的 sourcemap 也被简化为只包含对应行的。")],-1),U=s("p",null,[l("总体而言，内联 source map 的构建速度比外部 source map 更快（eval 最快，eval > inline > cheap > ...），但是代码体积会变大。在开发环境下，我们需要考虑构建速度快以及调试友好，所以可以使用 "),s("code",null,"eval-cheap-module-source-map"),l(" 或者 "),s("code",null,"eval-source-map"),l("，而前端框架的脚手架一般默认使用的是 "),s("code",null,"eval-source-map"),l("。在生产环境下，我们需要考虑源代码的隐藏、代码体积以及调试友好，所以不考虑内联 source map，而具体使用还需看使用场景需求。")],-1),W={id:"oneof",tabindex:"-1"},Z=s("p",null,"在生成环境 webpack 的配置文件中，我们通常会配置很多 loader 来处理项目中的文件。随着文件与 loader 增多，有可能会出现一个文件被匹配多次的情况，这样会降低构建速度。oneOf 配置可以帮我们很好的处理：",-1),q=s("div",{class:"language-javascript"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"javascript"),s("pre",{class:"shiki github-dark vp-code-dark"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#79B8FF"}},"module"),s("span",{style:{color:"#E1E4E8"}},"."),s("span",{style:{color:"#79B8FF"}},"exports"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#F97583"}},"="),s("span",{style:{color:"#E1E4E8"}}," {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"  module: {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"    rules: [")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"      {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"        oneOf: [")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"          "),s("span",{style:{color:"#6A737D"}},"// ...只匹配一次的 loader 配置")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"        ],")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"      },")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"      "),s("span",{style:{color:"#6A737D"}},"// ...其他loader配置")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"    ],")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"  },")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"  "),s("span",{style:{color:"#6A737D"}},"// ...此处省略其他配置")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"};")])])]),s("pre",{class:"shiki github-light vp-code-light"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#005CC5"}},"module"),s("span",{style:{color:"#24292E"}},"."),s("span",{style:{color:"#005CC5"}},"exports"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#D73A49"}},"="),s("span",{style:{color:"#24292E"}}," {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"  module: {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"    rules: [")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"      {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"        oneOf: [")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"          "),s("span",{style:{color:"#6A737D"}},"// ...只匹配一次的 loader 配置")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"        ],")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"      },")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"      "),s("span",{style:{color:"#6A737D"}},"// ...其他loader配置")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"    ],")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"  },")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"  "),s("span",{style:{color:"#6A737D"}},"// ...此处省略其他配置")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"};")])])]),s("button",{class:"collapse"})],-1),G=s("p",null,"配置在 oneOf 内的 loader 只会匹配一个，但是要注意不能有两个配置处理同一种类型文件。如果遇到需要处理两次的情况（比如处理 js 需要 eslint-loader 和 babel-loader），可以将其中一个配置（比如 js 的 eslint-loader）提取到 oneOf 的外面。",-1),I={id:"缓存",tabindex:"-1"},K={id:"babel-缓存",tabindex:"-1"},Q=s("p",null,"通常在我们的项目中，js 代码远比 css 等其他代码多。在生产环境中我们需要使用 babel 对 js 代码进行兼容性处理，假设我们有 100 个 js 模块，即使我只改动其中一个模块的内容，这 100 个模块都要重新进行兼容性处理，这样非常浪费构建时间。所以我们需要 babel 的缓存功能，将构建处理后的文件进行缓存，当其中一个模块发生变动时，只构建更新这个模块的文件，其他文件不做变化。",-1),X=s("div",{class:"language-javascript"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"javascript"),s("pre",{class:"shiki github-dark vp-code-dark"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#79B8FF"}},"module"),s("span",{style:{color:"#E1E4E8"}},"."),s("span",{style:{color:"#79B8FF"}},"exports"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#F97583"}},"="),s("span",{style:{color:"#E1E4E8"}}," {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"  module: {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"    rules: [")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"      {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"        test:"),s("span",{style:{color:"#DBEDFF"}}," "),s("span",{style:{color:"#9ECBFF"}},"/"),s("span",{style:{color:"#85E89D","font-weight":"bold"}},"\\."),s("span",{style:{color:"#DBEDFF"}},"js"),s("span",{style:{color:"#F97583"}},"$"),s("span",{style:{color:"#9ECBFF"}},"/"),s("span",{style:{color:"#E1E4E8"}},",")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"        exclude:"),s("span",{style:{color:"#DBEDFF"}}," "),s("span",{style:{color:"#9ECBFF"}},"/"),s("span",{style:{color:"#DBEDFF"}},"node_modules"),s("span",{style:{color:"#9ECBFF"}},"/"),s("span",{style:{color:"#E1E4E8"}},",")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"        loader: "),s("span",{style:{color:"#9ECBFF"}},'"babel-loader"'),s("span",{style:{color:"#E1E4E8"}},",")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"        options: {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"          prisets: [")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"            "),s("span",{style:{color:"#6A737D"}},"// ...此处省略无关配置")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"          ],")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"          cacheDirectory: "),s("span",{style:{color:"#79B8FF"}},"true"),s("span",{style:{color:"#E1E4E8"}},",")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"        },")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"      },")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"      "),s("span",{style:{color:"#6A737D"}},"// ...此处省略其他loader配置")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"    ],")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"  },")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"  "),s("span",{style:{color:"#6A737D"}},"// ...此处省略其他配置")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"};")])])]),s("pre",{class:"shiki github-light vp-code-light"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#005CC5"}},"module"),s("span",{style:{color:"#24292E"}},"."),s("span",{style:{color:"#005CC5"}},"exports"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#D73A49"}},"="),s("span",{style:{color:"#24292E"}}," {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"  module: {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"    rules: [")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"      {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"        test:"),s("span",{style:{color:"#032F62"}}," /"),s("span",{style:{color:"#22863A","font-weight":"bold"}},"\\."),s("span",{style:{color:"#032F62"}},"js"),s("span",{style:{color:"#D73A49"}},"$"),s("span",{style:{color:"#032F62"}},"/"),s("span",{style:{color:"#24292E"}},",")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"        exclude:"),s("span",{style:{color:"#032F62"}}," /node_modules/"),s("span",{style:{color:"#24292E"}},",")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"        loader: "),s("span",{style:{color:"#032F62"}},'"babel-loader"'),s("span",{style:{color:"#24292E"}},",")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"        options: {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"          prisets: [")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"            "),s("span",{style:{color:"#6A737D"}},"// ...此处省略无关配置")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"          ],")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"          cacheDirectory: "),s("span",{style:{color:"#005CC5"}},"true"),s("span",{style:{color:"#24292E"}},",")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"        },")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"      },")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"      "),s("span",{style:{color:"#6A737D"}},"// ...此处省略其他loader配置")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"    ],")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"  },")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"  "),s("span",{style:{color:"#6A737D"}},"// ...此处省略其他配置")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"};")])])]),s("button",{class:"collapse"})],-1),Y=s("p",null,[l("如上所示，我们只需在 babel 的配置项内添加 "),s("code",null,"cacheDirectory: true"),l(" 即可。")],-1),ss={id:"资源缓存",tabindex:"-1"},ls=s("p",null,"当我们访问一个网页时，会请求大量与网页相关的文件资源，这些资源的请求会消耗时间，而在请求的这段时间内，整个页面是空的，用户体验很不好。所以我们可以用到资源缓存，当用户访问网页时，将访问的资源进行缓存，当第二次进入页面时，就不用发送请求去拿资源，直接从缓存读取资源，从而节省很多请求时间。",-1),ns=s("p",null,"资源缓存需要在请求头中配置缓存选项，以后专门开文章讲解，这里不过多赘述。我们现在要讨论的是，当加入资源缓存后遇到的问题以及解决方案。我们配置资源缓存时，会配置缓存的过期时间。如果我们配置过期时间为一个小时，那么在这一个小时内，当前用户访问这个页面时的资源都会从缓存取。这就会出现一个问题：如果当前页面出现 bug 需要紧急修复，那么即使开发人员修复后重新发布新的资源，那这个页面依然不会及时响应，只能等到缓存过期后才能重新请求到新的资源。解决这个问题的方法有三个。",-1),os=s("ol",null,[s("li",null,"对资源文件名使用 hash 值")],-1),es=s("div",{class:"language-javascript"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"javascript"),s("pre",{class:"shiki github-dark vp-code-dark"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#79B8FF"}},"module"),s("span",{style:{color:"#E1E4E8"}},"."),s("span",{style:{color:"#79B8FF"}},"exports"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#F97583"}},"="),s("span",{style:{color:"#E1E4E8"}}," {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"  output: {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"    filename: "),s("span",{style:{color:"#9ECBFF"}},'"js/built.[hash:10].js"'),s("span",{style:{color:"#E1E4E8"}},",")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"    path: "),s("span",{style:{color:"#B392F0"}},"resolve"),s("span",{style:{color:"#E1E4E8"}},"(__dirname, "),s("span",{style:{color:"#9ECBFF"}},'"dist"'),s("span",{style:{color:"#E1E4E8"}},"),")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"  },")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"  plugins: [")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"    "),s("span",{style:{color:"#F97583"}},"new"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#B392F0"}},"MiniCssExtractPlugin"),s("span",{style:{color:"#E1E4E8"}},"({")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"      filename: "),s("span",{style:{color:"#9ECBFF"}},'"css/built.[hash:10].css"'),s("span",{style:{color:"#E1E4E8"}},",")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"    }),")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"  ],")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"  "),s("span",{style:{color:"#6A737D"}},"// ...此处省略其他配置")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"};")])])]),s("pre",{class:"shiki github-light vp-code-light"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#005CC5"}},"module"),s("span",{style:{color:"#24292E"}},"."),s("span",{style:{color:"#005CC5"}},"exports"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#D73A49"}},"="),s("span",{style:{color:"#24292E"}}," {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"  output: {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"    filename: "),s("span",{style:{color:"#032F62"}},'"js/built.[hash:10].js"'),s("span",{style:{color:"#24292E"}},",")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"    path: "),s("span",{style:{color:"#6F42C1"}},"resolve"),s("span",{style:{color:"#24292E"}},"(__dirname, "),s("span",{style:{color:"#032F62"}},'"dist"'),s("span",{style:{color:"#24292E"}},"),")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"  },")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"  plugins: [")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"    "),s("span",{style:{color:"#D73A49"}},"new"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#6F42C1"}},"MiniCssExtractPlugin"),s("span",{style:{color:"#24292E"}},"({")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"      filename: "),s("span",{style:{color:"#032F62"}},'"css/built.[hash:10].css"'),s("span",{style:{color:"#24292E"}},",")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"    }),")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"  ],")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"  "),s("span",{style:{color:"#6A737D"}},"// ...此处省略其他配置")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"};")])])]),s("button",{class:"collapse"})],-1),as=s("p",null,[l("webpack 每次构建时会生成一个唯一的 hash 值， "),s("code",null,"[hash:10]"),l(" 意为取 hash 值的前十位。这样每次构建的文件名都会不同，即使页面有资源缓存，也会去请求新的资源文件。这个方法有个问题：由于我们使用每次打包生成的 hash 给资源文件命名，所以即使我这次只改动了一个文件的内容，打包发布后所有缓存都会失效。")],-1),ts=s("ol",{start:"2"},[s("li",null,"对资源文件名使用 chunkhash 值")],-1),cs=s("div",{class:"language-javascript"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"javascript"),s("pre",{class:"shiki github-dark vp-code-dark"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#79B8FF"}},"module"),s("span",{style:{color:"#E1E4E8"}},"."),s("span",{style:{color:"#79B8FF"}},"exports"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#F97583"}},"="),s("span",{style:{color:"#E1E4E8"}}," {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"  output: {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"    filename: "),s("span",{style:{color:"#9ECBFF"}},'"js/built.[chunkhash:10].js"'),s("span",{style:{color:"#E1E4E8"}},",")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"    path: "),s("span",{style:{color:"#B392F0"}},"resolve"),s("span",{style:{color:"#E1E4E8"}},"(__dirname, "),s("span",{style:{color:"#9ECBFF"}},'"dist"'),s("span",{style:{color:"#E1E4E8"}},"),")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"  },")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"  plugins: [")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"    "),s("span",{style:{color:"#F97583"}},"new"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#B392F0"}},"MiniCssExtractPlugin"),s("span",{style:{color:"#E1E4E8"}},"({")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"      filename: "),s("span",{style:{color:"#9ECBFF"}},'"css/built.[chunkhash:10].css"'),s("span",{style:{color:"#E1E4E8"}},",")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"    }),")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"  ],")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"  "),s("span",{style:{color:"#6A737D"}},"// ...此处省略其他配置")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"};")])])]),s("pre",{class:"shiki github-light vp-code-light"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#005CC5"}},"module"),s("span",{style:{color:"#24292E"}},"."),s("span",{style:{color:"#005CC5"}},"exports"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#D73A49"}},"="),s("span",{style:{color:"#24292E"}}," {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"  output: {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"    filename: "),s("span",{style:{color:"#032F62"}},'"js/built.[chunkhash:10].js"'),s("span",{style:{color:"#24292E"}},",")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"    path: "),s("span",{style:{color:"#6F42C1"}},"resolve"),s("span",{style:{color:"#24292E"}},"(__dirname, "),s("span",{style:{color:"#032F62"}},'"dist"'),s("span",{style:{color:"#24292E"}},"),")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"  },")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"  plugins: [")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"    "),s("span",{style:{color:"#D73A49"}},"new"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#6F42C1"}},"MiniCssExtractPlugin"),s("span",{style:{color:"#24292E"}},"({")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"      filename: "),s("span",{style:{color:"#032F62"}},'"css/built.[chunkhash:10].css"'),s("span",{style:{color:"#24292E"}},",")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"    }),")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"  ],")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"  "),s("span",{style:{color:"#6A737D"}},"// ...此处省略其他配置")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"};")])])]),s("button",{class:"collapse"})],-1),ps=s("p",null,"chunkhash 如字面意思，是根据“块”生成的 hash，webpack 会将一个入口文件及其引入的所有文件模块打包成一个 chunk，一个 chunk 会生成一个 chunkhash。如果项目是单入口的，那么只会生成一个 chunkhash，多入口才会生成多个 chunkhash，所以这个方法依然会遇到第一个方法遇到的问题，因为拆分的不够“细”。",-1),rs=s("ol",{start:"3"},[s("li",null,"对资源文件名使用 contenthash 值")],-1),Es=s("div",{class:"language-javascript"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"javascript"),s("pre",{class:"shiki github-dark vp-code-dark"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#79B8FF"}},"module"),s("span",{style:{color:"#E1E4E8"}},"."),s("span",{style:{color:"#79B8FF"}},"exports"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#F97583"}},"="),s("span",{style:{color:"#E1E4E8"}}," {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"  output: {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"    filename: "),s("span",{style:{color:"#9ECBFF"}},'"js/built.[contenthash:10].js"'),s("span",{style:{color:"#E1E4E8"}},",")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"    path: "),s("span",{style:{color:"#B392F0"}},"resolve"),s("span",{style:{color:"#E1E4E8"}},"(__dirname, "),s("span",{style:{color:"#9ECBFF"}},'"dist"'),s("span",{style:{color:"#E1E4E8"}},"),")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"  },")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"  plugins: [")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"    "),s("span",{style:{color:"#F97583"}},"new"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#B392F0"}},"MiniCssExtractPlugin"),s("span",{style:{color:"#E1E4E8"}},"({")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"      filename: "),s("span",{style:{color:"#9ECBFF"}},'"css/built.[contenthash:10].css"'),s("span",{style:{color:"#E1E4E8"}},",")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"    }),")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"  ],")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"  "),s("span",{style:{color:"#6A737D"}},"// ...此处省略其他配置")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"};")])])]),s("pre",{class:"shiki github-light vp-code-light"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#005CC5"}},"module"),s("span",{style:{color:"#24292E"}},"."),s("span",{style:{color:"#005CC5"}},"exports"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#D73A49"}},"="),s("span",{style:{color:"#24292E"}}," {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"  output: {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"    filename: "),s("span",{style:{color:"#032F62"}},'"js/built.[contenthash:10].js"'),s("span",{style:{color:"#24292E"}},",")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"    path: "),s("span",{style:{color:"#6F42C1"}},"resolve"),s("span",{style:{color:"#24292E"}},"(__dirname, "),s("span",{style:{color:"#032F62"}},'"dist"'),s("span",{style:{color:"#24292E"}},"),")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"  },")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"  plugins: [")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"    "),s("span",{style:{color:"#D73A49"}},"new"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#6F42C1"}},"MiniCssExtractPlugin"),s("span",{style:{color:"#24292E"}},"({")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"      filename: "),s("span",{style:{color:"#032F62"}},'"css/built.[contenthash:10].css"'),s("span",{style:{color:"#24292E"}},",")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"    }),")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"  ],")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"  "),s("span",{style:{color:"#6A737D"}},"// ...此处省略其他配置")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"};")])])]),s("button",{class:"collapse"})],-1),is=s("p",null,"contenthash 是 webpack 根据文件内容生成的 hash 值。不同文件的 contenthash 值一定不一样，并且同一个文件如果内容不变，那么无论生成多少次 contenthash 值都不会改变。所以这个方法能很好的解决前两种方法遇到的问题，让代码上线运行后缓存更好用。",-1),ys={id:"tree-shaking",tabindex:"-1"},ds=s("p",null,"从字面意思来看，这个优化叫“树摇”或者“摇树”。如果把我们的项目当做树，把使用的第三方插件当做树枝，那么项目使用到第三方插件的内容就是树叶，是健康的树叶，而未使用到的第三方插件的内容就是枯萎的树叶。当我们用力摇晃这颗树，就会将枯萎的树叶摇落。tree shaking 就是为了去除我们在项目中没有使用到的代码，这样可以让我们代码的体积变小。",-1),us=s("p",null,"tree shaking 的使用前提条件为：1. 必须使用 ES6 模块化；2. 开启 production 环境。当满足这两个条件后，webpack 会自动帮我们进行 tree shaking。",-1),hs=s("p",null,"如果只是这样配置，打包编译后会出现问题，可能会把 css、@babel/polyfill 等有副作用的文件干掉。所以我们需要在 package.json 中配置：",-1),ms=s("div",{class:"language-json"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"json"),s("pre",{class:"shiki github-dark vp-code-dark"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"{")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"  "),s("span",{style:{color:"#6A737D"}},"// ...省略其他配置")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"  "),s("span",{style:{color:"#FDAEB7","font-style":"italic"}},"“sideEffects”"),s("span",{style:{color:"#E1E4E8"}},": ["),s("span",{style:{color:"#9ECBFF"}},'"*.css"'),s("span",{style:{color:"#E1E4E8"}},", "),s("span",{style:{color:"#9ECBFF"}},'"*.less"'),s("span",{style:{color:"#E1E4E8"}},"]")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"}")])])]),s("pre",{class:"shiki github-light vp-code-light"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"{")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"  "),s("span",{style:{color:"#6A737D"}},"// ...省略其他配置")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"  "),s("span",{style:{color:"#B31D28","font-style":"italic"}},"“sideEffects”"),s("span",{style:{color:"#24292E"}},": ["),s("span",{style:{color:"#032F62"}},'"*.css"'),s("span",{style:{color:"#24292E"}},", "),s("span",{style:{color:"#032F62"}},'"*.less"'),s("span",{style:{color:"#24292E"}},"]")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"}")])])]),s("button",{class:"collapse"})],-1),Fs=s("p",null,"如上所示，我们需要配置 sideEffects 项，将有用却被 tree shaking 干掉的文件或文件类型配置到数组中。",-1),_s={id:"code-split",tabindex:"-1"},gs=s("p",null,"代码分割可以帮助我们将打包后的文件分割为多个文件，这样做可以让文件请求并行，加快文件请求速度，并且还能实现按需加载。当我们开发单页面应用时，整个项目的代码量会非常大，届时可以安照路由进行文件分割，将每个路由的内容拆成单独的文件，这样便能实现按需加载。常用的分割代码方案有三种，彼此可以组合使用。",-1),ks={id:"通过多入口实现",tabindex:"-1"},bs=s("p",null,"我们可以将 entry 项从单入口改为多入口，多入口的特点是每当有一个入口，最终打包编译后就有一个对应的 bundle，从而实现代码分割。",-1),Cs=s("div",{class:"language-javascript"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"javascript"),s("pre",{class:"shiki github-dark vp-code-dark"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#79B8FF"}},"module"),s("span",{style:{color:"#E1E4E8"}},"."),s("span",{style:{color:"#79B8FF"}},"exports"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#F97583"}},"="),s("span",{style:{color:"#E1E4E8"}}," {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"  entry: {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"    main: "),s("span",{style:{color:"#9ECBFF"}},'"./src/main.js"'),s("span",{style:{color:"#E1E4E8"}},",")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"    index: "),s("span",{style:{color:"#9ECBFF"}},'"./src/index.js"'),s("span",{style:{color:"#E1E4E8"}},",")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"  },")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"  output: {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"    filename: "),s("span",{style:{color:"#9ECBFF"}},'"js/[name].[contenthash:10].js"'),s("span",{style:{color:"#E1E4E8"}},",")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"    path: "),s("span",{style:{color:"#B392F0"}},"resolve"),s("span",{style:{color:"#E1E4E8"}},"(__dirname, "),s("span",{style:{color:"#9ECBFF"}},'"dist"'),s("span",{style:{color:"#E1E4E8"}},"),")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"  },")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"};")])])]),s("pre",{class:"shiki github-light vp-code-light"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#005CC5"}},"module"),s("span",{style:{color:"#24292E"}},"."),s("span",{style:{color:"#005CC5"}},"exports"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#D73A49"}},"="),s("span",{style:{color:"#24292E"}}," {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"  entry: {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"    main: "),s("span",{style:{color:"#032F62"}},'"./src/main.js"'),s("span",{style:{color:"#24292E"}},",")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"    index: "),s("span",{style:{color:"#032F62"}},'"./src/index.js"'),s("span",{style:{color:"#24292E"}},",")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"  },")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"  output: {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"    filename: "),s("span",{style:{color:"#032F62"}},'"js/[name].[contenthash:10].js"'),s("span",{style:{color:"#24292E"}},",")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"    path: "),s("span",{style:{color:"#6F42C1"}},"resolve"),s("span",{style:{color:"#24292E"}},"(__dirname, "),s("span",{style:{color:"#032F62"}},'"dist"'),s("span",{style:{color:"#24292E"}},"),")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"  },")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"};")])])]),s("button",{class:"collapse"})],-1),vs=s("p",null,[l("其中，entry 下配了几个入口，则会输出几个对应的 bundle。filename 配置中的 "),s("code",null,"[name]"),l(" 是将原本的文件名配置成输出后的文件名。由于我们的项目实际中经常出现页面变动，使用这种实现方式就显得不太灵活，并且这种方式多用在多页面应用的项目中。")],-1),fs={id:"通过-splitchunks-实现",tabindex:"-1"},Bs=s("p",null,"我们可以通过 splitChunks 实现代码分割。",-1),js=s("div",{class:"language-javascript"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"javascript"),s("pre",{class:"shiki github-dark vp-code-dark"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#79B8FF"}},"module"),s("span",{style:{color:"#E1E4E8"}},"."),s("span",{style:{color:"#79B8FF"}},"exports"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#F97583"}},"="),s("span",{style:{color:"#E1E4E8"}}," {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"  "),s("span",{style:{color:"#6A737D"}},"// ...省略其他配置")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"  optimization: {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"    splitChunks: {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"      chunks: "),s("span",{style:{color:"#9ECBFF"}},'"all"'),s("span",{style:{color:"#E1E4E8"}},",")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"    },")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"  },")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"};")])])]),s("pre",{class:"shiki github-light vp-code-light"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#005CC5"}},"module"),s("span",{style:{color:"#24292E"}},"."),s("span",{style:{color:"#005CC5"}},"exports"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#D73A49"}},"="),s("span",{style:{color:"#24292E"}}," {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"  "),s("span",{style:{color:"#6A737D"}},"// ...省略其他配置")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"  optimization: {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"    splitChunks: {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"      chunks: "),s("span",{style:{color:"#032F62"}},'"all"'),s("span",{style:{color:"#24292E"}},",")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"    },")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"  },")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"};")])])]),s("button",{class:"collapse"})],-1),Ds=s("p",null,"如果配合单入口使用，这个配置可以将项目 node_module 中代码单独打包一个 chenk 最终输出。如果配合多入口使用，这个配置可以自动分析多入口 chunk 中是否有共的文件，如果有则将其打包成一个单独 chunk。",-1),As={id:"通过-js-代码实现",tabindex:"-1"},xs=s("p",null,"我们可以通过使用 js 的 import 动态导入语法，让某个文件被单独打包成一个 chunk。",-1),ws=s("div",{class:"language-javascript"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"javascript"),s("pre",{class:"shiki github-dark vp-code-dark"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#6A737D"}},"// test.js")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F97583"}},"export"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#F97583"}},"function"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#B392F0"}},"testFunction"),s("span",{style:{color:"#E1E4E8"}},"() {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"  console."),s("span",{style:{color:"#B392F0"}},"log"),s("span",{style:{color:"#E1E4E8"}},"("),s("span",{style:{color:"#9ECBFF"}},'"这是 test 的函数"'),s("span",{style:{color:"#E1E4E8"}},");")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"}")]),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#6A737D"}},"// index.js")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#B392F0"}},"import"),s("span",{style:{color:"#E1E4E8"}},"("),s("span",{style:{color:"#6A737D"}},"/* webpackChunkName: 'test' */"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},'"./test"'),s("span",{style:{color:"#E1E4E8"}},")")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"  ."),s("span",{style:{color:"#B392F0"}},"then"),s("span",{style:{color:"#E1E4E8"}},"(({ "),s("span",{style:{color:"#FFAB70"}},"testFunction"),s("span",{style:{color:"#E1E4E8"}}," }) "),s("span",{style:{color:"#F97583"}},"=>"),s("span",{style:{color:"#E1E4E8"}}," {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"    "),s("span",{style:{color:"#B392F0"}},"testFunction"),s("span",{style:{color:"#E1E4E8"}},"();")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"  })")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"  ."),s("span",{style:{color:"#B392F0"}},"catch"),s("span",{style:{color:"#E1E4E8"}},"(() "),s("span",{style:{color:"#F97583"}},"=>"),s("span",{style:{color:"#E1E4E8"}}," {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"    console."),s("span",{style:{color:"#B392F0"}},"error"),s("span",{style:{color:"#E1E4E8"}},"("),s("span",{style:{color:"#9ECBFF"}},'"文件加载失败！"'),s("span",{style:{color:"#E1E4E8"}},");")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"  });")])])]),s("pre",{class:"shiki github-light vp-code-light"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#6A737D"}},"// test.js")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D73A49"}},"export"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#D73A49"}},"function"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#6F42C1"}},"testFunction"),s("span",{style:{color:"#24292E"}},"() {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"  console."),s("span",{style:{color:"#6F42C1"}},"log"),s("span",{style:{color:"#24292E"}},"("),s("span",{style:{color:"#032F62"}},'"这是 test 的函数"'),s("span",{style:{color:"#24292E"}},");")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"}")]),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#6A737D"}},"// index.js")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#6F42C1"}},"import"),s("span",{style:{color:"#24292E"}},"("),s("span",{style:{color:"#6A737D"}},"/* webpackChunkName: 'test' */"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},'"./test"'),s("span",{style:{color:"#24292E"}},")")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"  ."),s("span",{style:{color:"#6F42C1"}},"then"),s("span",{style:{color:"#24292E"}},"(({ "),s("span",{style:{color:"#E36209"}},"testFunction"),s("span",{style:{color:"#24292E"}}," }) "),s("span",{style:{color:"#D73A49"}},"=>"),s("span",{style:{color:"#24292E"}}," {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"    "),s("span",{style:{color:"#6F42C1"}},"testFunction"),s("span",{style:{color:"#24292E"}},"();")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"  })")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"  ."),s("span",{style:{color:"#6F42C1"}},"catch"),s("span",{style:{color:"#24292E"}},"(() "),s("span",{style:{color:"#D73A49"}},"=>"),s("span",{style:{color:"#24292E"}}," {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"    console."),s("span",{style:{color:"#6F42C1"}},"error"),s("span",{style:{color:"#24292E"}},"("),s("span",{style:{color:"#032F62"}},'"文件加载失败！"'),s("span",{style:{color:"#24292E"}},");")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"  });")])])]),s("button",{class:"collapse"})],-1),Ms=s("p",null,[l("其中，"),s("code",null,"/* webpackChunkName: 'test' */"),l(" 为设置打包后独立文件的命名，命名为 "),s("code",null,"test"),l("。"),s("code",null,"'./test'"),l(" 为动态导入的文件路径。"),s("code",null,"import()"),l(" 返回值是一个 Promise 对象，其 "),s("code",null,"then"),l(" 的回调函数参数是 ES6 Module，所以我们可以将其内容解构使用。")],-1);function Ps(o,$s,Rs,Hs,p,Os){const e=m,r=E;return h(),d(r,{frontmatter:p.frontmatter,data:p.data},{"main-content-md":n(()=>[s("h2",g,[l("前言 "),a(e,{class:"header-anchor",href:"#前言","aria-label":'Permalink to "前言"'},{default:n(()=>[l("​")]),_:1})]),k,s("h2",b,[l("HMR "),a(e,{class:"header-anchor",href:"#hmr","aria-label":'Permalink to "HMR"'},{default:n(()=>[l("​")]),_:1})]),C,v,f,B,j,D,A,x,w,s("h2",M,[l("source map "),a(e,{class:"header-anchor",href:"#source-map","aria-label":'Permalink to "source map"'},{default:n(()=>[l("​")]),_:1})]),P,$,R,H,O,S,z,N,V,T,J,L,U,s("h2",W,[l("oneOf "),a(e,{class:"header-anchor",href:"#oneof","aria-label":'Permalink to "oneOf"'},{default:n(()=>[l("​")]),_:1})]),Z,q,G,s("h2",I,[l("缓存 "),a(e,{class:"header-anchor",href:"#缓存","aria-label":'Permalink to "缓存"'},{default:n(()=>[l("​")]),_:1})]),s("h3",K,[l("babel 缓存 "),a(e,{class:"header-anchor",href:"#babel-缓存","aria-label":'Permalink to "babel 缓存"'},{default:n(()=>[l("​")]),_:1})]),Q,X,Y,s("h3",ss,[l("资源缓存 "),a(e,{class:"header-anchor",href:"#资源缓存","aria-label":'Permalink to "资源缓存"'},{default:n(()=>[l("​")]),_:1})]),ls,ns,os,es,as,ts,cs,ps,rs,Es,is,s("h2",ys,[l("tree shaking "),a(e,{class:"header-anchor",href:"#tree-shaking","aria-label":'Permalink to "tree shaking"'},{default:n(()=>[l("​")]),_:1})]),ds,us,hs,ms,Fs,s("h2",_s,[l("code split "),a(e,{class:"header-anchor",href:"#code-split","aria-label":'Permalink to "code split"'},{default:n(()=>[l("​")]),_:1})]),gs,s("h3",ks,[l("通过多入口实现 "),a(e,{class:"header-anchor",href:"#通过多入口实现","aria-label":'Permalink to "通过多入口实现"'},{default:n(()=>[l("​")]),_:1})]),bs,Cs,vs,s("h3",fs,[l("通过 splitChunks 实现 "),a(e,{class:"header-anchor",href:"#通过-splitchunks-实现","aria-label":'Permalink to "通过 splitChunks 实现"'},{default:n(()=>[l("​")]),_:1})]),Bs,js,Ds,s("h3",As,[l("通过 js 代码实现 "),a(e,{class:"header-anchor",href:"#通过-js-代码实现","aria-label":'Permalink to "通过 js 代码实现"'},{default:n(()=>[l("​")]),_:1})]),xs,ws,Ms]),"main-header":n(()=>[t(o.$slots,"main-header")]),"main-header-after":n(()=>[t(o.$slots,"main-header-after")]),"main-nav":n(()=>[t(o.$slots,"main-nav")]),"main-content":n(()=>[t(o.$slots,"main-content")]),"main-content-after":n(()=>[t(o.$slots,"main-content-after")]),"main-nav-before":n(()=>[t(o.$slots,"main-nav-before")]),"main-nav-after":n(()=>[t(o.$slots,"main-nav-after")]),comment:n(()=>[t(o.$slots,"comment")]),footer:n(()=>[t(o.$slots,"footer")]),aside:n(()=>[t(o.$slots,"aside")]),"aside-custom":n(()=>[t(o.$slots,"aside-custom")]),default:n(()=>[t(o.$slots,"default")]),_:3},8,["frontmatter","data"])}const Us=i(_,[["render",Ps]]);export{Ls as __pageData,Us as default};
